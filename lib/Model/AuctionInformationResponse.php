<?php
/**
 * AuctionInformationResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JETRACT
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuctionInformationResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuctionInformationResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuctionInformationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'code' => 'string',
        'name' => 'string',
        'type' => 'float',
        'bid_change_limit' => 'float',
        'bid_limit' => 'float',
        'budget' => 'float',
        'minimum_change' => 'float',
        'currency' => 'string',
        'visible_rank' => 'float',
        'list_price' => 'float',
        'agreement_text' => 'string',
        'note' => 'string',
        'delivery_date' => 'string',
        'auto_time_extension' => 'object',
        'date' => 'string',
        'duration' => 'float',
        'default_duration' => 'float',
        'end_date' => 'string',
        'reminder' => 'object',
        'publish' => 'float',
        'status' => 'float',
        'start_date' => 'string',
        'transport_type' => 'string',
        'invite_mail_subject' => 'string',
        'invite_mail_body' => 'string',
        'valid_until_date' => 'string',
        'payment_type_id' => 'string',
        'created_date' => 'string',
        'approval_process' => 'object',
        'department' => 'object',
        'order_id' => 'string',
        'creator' => 'object',
        'time_control' => 'bool',
        'auto_start' => 'float',
        'auto_end' => 'float',
        'vat_rate' => 'float',
        'bidder_vat_rate' => 'float',
        'item_files' => 'float',
        'bid_change_type' => 'float',
        'change_amounts' => 'object[]',
        'sales_count' => 'float',
        'auction_items' => '\Swagger\Client\Model\AuctionItemResponse[]',
        'bidders' => '\Swagger\Client\Model\AuctionBidderResponse[]',
        'bidder_groups' => '\Swagger\Client\Model\AuctionBidderGroupResponse[]',
        'auction_conditions' => '\Swagger\Client\Model\AuctionConditionResponse[]',
        'auction_stages' => '\Swagger\Client\Model\AuctionStageResponse[]',
        'address' => '\Swagger\Client\Model\AuctionAddressResponse',
        'stage_rank' => 'object[]',
        'announcements' => '\Swagger\Client\Model\AuctionAnnouncementResponse[]',
        'server_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'code' => null,
        'name' => null,
        'type' => null,
        'bid_change_limit' => null,
        'bid_limit' => null,
        'budget' => null,
        'minimum_change' => null,
        'currency' => null,
        'visible_rank' => null,
        'list_price' => null,
        'agreement_text' => null,
        'note' => null,
        'delivery_date' => null,
        'auto_time_extension' => null,
        'date' => null,
        'duration' => null,
        'default_duration' => null,
        'end_date' => null,
        'reminder' => null,
        'publish' => null,
        'status' => null,
        'start_date' => null,
        'transport_type' => null,
        'invite_mail_subject' => null,
        'invite_mail_body' => null,
        'valid_until_date' => null,
        'payment_type_id' => null,
        'created_date' => null,
        'approval_process' => null,
        'department' => null,
        'order_id' => null,
        'creator' => null,
        'time_control' => null,
        'auto_start' => null,
        'auto_end' => null,
        'vat_rate' => null,
        'bidder_vat_rate' => null,
        'item_files' => null,
        'bid_change_type' => null,
        'change_amounts' => null,
        'sales_count' => null,
        'auction_items' => null,
        'bidders' => null,
        'bidder_groups' => null,
        'auction_conditions' => null,
        'auction_stages' => null,
        'address' => null,
        'stage_rank' => null,
        'announcements' => null,
        'server_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'code' => 'code',
        'name' => 'name',
        'type' => 'type',
        'bid_change_limit' => 'bidChangeLimit',
        'bid_limit' => 'bidLimit',
        'budget' => 'budget',
        'minimum_change' => 'minimumChange',
        'currency' => 'currency',
        'visible_rank' => 'visibleRank',
        'list_price' => 'listPrice',
        'agreement_text' => 'agreementText',
        'note' => 'note',
        'delivery_date' => 'deliveryDate',
        'auto_time_extension' => 'autoTimeExtension',
        'date' => 'date',
        'duration' => 'duration',
        'default_duration' => 'defaultDuration',
        'end_date' => 'endDate',
        'reminder' => 'reminder',
        'publish' => 'publish',
        'status' => 'status',
        'start_date' => 'startDate',
        'transport_type' => 'transportType',
        'invite_mail_subject' => 'inviteMailSubject',
        'invite_mail_body' => 'inviteMailBody',
        'valid_until_date' => 'validUntilDate',
        'payment_type_id' => 'paymentTypeID',
        'created_date' => 'createdDate',
        'approval_process' => 'approvalProcess',
        'department' => 'department',
        'order_id' => 'orderID',
        'creator' => 'creator',
        'time_control' => 'timeControl',
        'auto_start' => 'autoStart',
        'auto_end' => 'autoEnd',
        'vat_rate' => 'vatRate',
        'bidder_vat_rate' => 'bidderVatRate',
        'item_files' => 'itemFiles',
        'bid_change_type' => 'bidChangeType',
        'change_amounts' => 'changeAmounts',
        'sales_count' => 'salesCount',
        'auction_items' => 'auctionItems',
        'bidders' => 'bidders',
        'bidder_groups' => 'bidderGroups',
        'auction_conditions' => 'auctionConditions',
        'auction_stages' => 'auctionStages',
        'address' => 'address',
        'stage_rank' => 'stageRank',
        'announcements' => 'announcements',
        'server_time' => 'serverTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'name' => 'setName',
        'type' => 'setType',
        'bid_change_limit' => 'setBidChangeLimit',
        'bid_limit' => 'setBidLimit',
        'budget' => 'setBudget',
        'minimum_change' => 'setMinimumChange',
        'currency' => 'setCurrency',
        'visible_rank' => 'setVisibleRank',
        'list_price' => 'setListPrice',
        'agreement_text' => 'setAgreementText',
        'note' => 'setNote',
        'delivery_date' => 'setDeliveryDate',
        'auto_time_extension' => 'setAutoTimeExtension',
        'date' => 'setDate',
        'duration' => 'setDuration',
        'default_duration' => 'setDefaultDuration',
        'end_date' => 'setEndDate',
        'reminder' => 'setReminder',
        'publish' => 'setPublish',
        'status' => 'setStatus',
        'start_date' => 'setStartDate',
        'transport_type' => 'setTransportType',
        'invite_mail_subject' => 'setInviteMailSubject',
        'invite_mail_body' => 'setInviteMailBody',
        'valid_until_date' => 'setValidUntilDate',
        'payment_type_id' => 'setPaymentTypeId',
        'created_date' => 'setCreatedDate',
        'approval_process' => 'setApprovalProcess',
        'department' => 'setDepartment',
        'order_id' => 'setOrderId',
        'creator' => 'setCreator',
        'time_control' => 'setTimeControl',
        'auto_start' => 'setAutoStart',
        'auto_end' => 'setAutoEnd',
        'vat_rate' => 'setVatRate',
        'bidder_vat_rate' => 'setBidderVatRate',
        'item_files' => 'setItemFiles',
        'bid_change_type' => 'setBidChangeType',
        'change_amounts' => 'setChangeAmounts',
        'sales_count' => 'setSalesCount',
        'auction_items' => 'setAuctionItems',
        'bidders' => 'setBidders',
        'bidder_groups' => 'setBidderGroups',
        'auction_conditions' => 'setAuctionConditions',
        'auction_stages' => 'setAuctionStages',
        'address' => 'setAddress',
        'stage_rank' => 'setStageRank',
        'announcements' => 'setAnnouncements',
        'server_time' => 'setServerTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'name' => 'getName',
        'type' => 'getType',
        'bid_change_limit' => 'getBidChangeLimit',
        'bid_limit' => 'getBidLimit',
        'budget' => 'getBudget',
        'minimum_change' => 'getMinimumChange',
        'currency' => 'getCurrency',
        'visible_rank' => 'getVisibleRank',
        'list_price' => 'getListPrice',
        'agreement_text' => 'getAgreementText',
        'note' => 'getNote',
        'delivery_date' => 'getDeliveryDate',
        'auto_time_extension' => 'getAutoTimeExtension',
        'date' => 'getDate',
        'duration' => 'getDuration',
        'default_duration' => 'getDefaultDuration',
        'end_date' => 'getEndDate',
        'reminder' => 'getReminder',
        'publish' => 'getPublish',
        'status' => 'getStatus',
        'start_date' => 'getStartDate',
        'transport_type' => 'getTransportType',
        'invite_mail_subject' => 'getInviteMailSubject',
        'invite_mail_body' => 'getInviteMailBody',
        'valid_until_date' => 'getValidUntilDate',
        'payment_type_id' => 'getPaymentTypeId',
        'created_date' => 'getCreatedDate',
        'approval_process' => 'getApprovalProcess',
        'department' => 'getDepartment',
        'order_id' => 'getOrderId',
        'creator' => 'getCreator',
        'time_control' => 'getTimeControl',
        'auto_start' => 'getAutoStart',
        'auto_end' => 'getAutoEnd',
        'vat_rate' => 'getVatRate',
        'bidder_vat_rate' => 'getBidderVatRate',
        'item_files' => 'getItemFiles',
        'bid_change_type' => 'getBidChangeType',
        'change_amounts' => 'getChangeAmounts',
        'sales_count' => 'getSalesCount',
        'auction_items' => 'getAuctionItems',
        'bidders' => 'getBidders',
        'bidder_groups' => 'getBidderGroups',
        'auction_conditions' => 'getAuctionConditions',
        'auction_stages' => 'getAuctionStages',
        'address' => 'getAddress',
        'stage_rank' => 'getStageRank',
        'announcements' => 'getAnnouncements',
        'server_time' => 'getServerTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['bid_change_limit'] = isset($data['bid_change_limit']) ? $data['bid_change_limit'] : null;
        $this->container['bid_limit'] = isset($data['bid_limit']) ? $data['bid_limit'] : null;
        $this->container['budget'] = isset($data['budget']) ? $data['budget'] : null;
        $this->container['minimum_change'] = isset($data['minimum_change']) ? $data['minimum_change'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['visible_rank'] = isset($data['visible_rank']) ? $data['visible_rank'] : null;
        $this->container['list_price'] = isset($data['list_price']) ? $data['list_price'] : null;
        $this->container['agreement_text'] = isset($data['agreement_text']) ? $data['agreement_text'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['auto_time_extension'] = isset($data['auto_time_extension']) ? $data['auto_time_extension'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['default_duration'] = isset($data['default_duration']) ? $data['default_duration'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['reminder'] = isset($data['reminder']) ? $data['reminder'] : null;
        $this->container['publish'] = isset($data['publish']) ? $data['publish'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['transport_type'] = isset($data['transport_type']) ? $data['transport_type'] : null;
        $this->container['invite_mail_subject'] = isset($data['invite_mail_subject']) ? $data['invite_mail_subject'] : null;
        $this->container['invite_mail_body'] = isset($data['invite_mail_body']) ? $data['invite_mail_body'] : null;
        $this->container['valid_until_date'] = isset($data['valid_until_date']) ? $data['valid_until_date'] : null;
        $this->container['payment_type_id'] = isset($data['payment_type_id']) ? $data['payment_type_id'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['approval_process'] = isset($data['approval_process']) ? $data['approval_process'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['time_control'] = isset($data['time_control']) ? $data['time_control'] : null;
        $this->container['auto_start'] = isset($data['auto_start']) ? $data['auto_start'] : null;
        $this->container['auto_end'] = isset($data['auto_end']) ? $data['auto_end'] : null;
        $this->container['vat_rate'] = isset($data['vat_rate']) ? $data['vat_rate'] : null;
        $this->container['bidder_vat_rate'] = isset($data['bidder_vat_rate']) ? $data['bidder_vat_rate'] : null;
        $this->container['item_files'] = isset($data['item_files']) ? $data['item_files'] : null;
        $this->container['bid_change_type'] = isset($data['bid_change_type']) ? $data['bid_change_type'] : null;
        $this->container['change_amounts'] = isset($data['change_amounts']) ? $data['change_amounts'] : null;
        $this->container['sales_count'] = isset($data['sales_count']) ? $data['sales_count'] : null;
        $this->container['auction_items'] = isset($data['auction_items']) ? $data['auction_items'] : null;
        $this->container['bidders'] = isset($data['bidders']) ? $data['bidders'] : null;
        $this->container['bidder_groups'] = isset($data['bidder_groups']) ? $data['bidder_groups'] : null;
        $this->container['auction_conditions'] = isset($data['auction_conditions']) ? $data['auction_conditions'] : null;
        $this->container['auction_stages'] = isset($data['auction_stages']) ? $data['auction_stages'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['stage_rank'] = isset($data['stage_rank']) ? $data['stage_rank'] : null;
        $this->container['announcements'] = isset($data['announcements']) ? $data['announcements'] : null;
        $this->container['server_time'] = isset($data['server_time']) ? $data['server_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the auction.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Code of the auction. Automatically generated.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the auction.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return float
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param float $type Defines the auction type. Examples<br>1:Reverse Classic Auction<br>3:Reverse British Auction<br>4:Reverse Sealed Auction<br>5:Reverse Sealed Enveloped Auction
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets bid_change_limit
     *
     * @return float
     */
    public function getBidChangeLimit()
    {
        return $this->container['bid_change_limit'];
    }

    /**
     * Sets bid_change_limit
     *
     * @param float $bid_change_limit Limit bidders to increase to decrease their bids depending on the Auction type.<br>1:No Limit<br>2:Apply Limit
     *
     * @return $this
     */
    public function setBidChangeLimit($bid_change_limit)
    {
        $this->container['bid_change_limit'] = $bid_change_limit;

        return $this;
    }

    /**
     * Gets bid_limit
     *
     * @return float
     */
    public function getBidLimit()
    {
        return $this->container['bid_limit'];
    }

    /**
     * Sets bid_limit
     *
     * @param float $bid_limit Maximum/Minimum bid limit. Depending on the auction type it can be reverse or forward change.<br>When not specified, returns zero value.
     *
     * @return $this
     */
    public function setBidLimit($bid_limit)
    {
        $this->container['bid_limit'] = $bid_limit;

        return $this;
    }

    /**
     * Gets budget
     *
     * @return float
     */
    public function getBudget()
    {
        return $this->container['budget'];
    }

    /**
     * Sets budget
     *
     * @param float $budget Budget of the auction. Only used for internal reporting tools.<br>When not specified, returns zero value.
     *
     * @return $this
     */
    public function setBudget($budget)
    {
        $this->container['budget'] = $budget;

        return $this;
    }

    /**
     * Gets minimum_change
     *
     * @return float
     */
    public function getMinimumChange()
    {
        return $this->container['minimum_change'];
    }

    /**
     * Sets minimum_change
     *
     * @param float $minimum_change Minimum amount of change for the next bid.<br>Depending on the auction type it can be reverse or forward change.<br>When not specified, returns zero value.
     *
     * @return $this
     */
    public function setMinimumChange($minimum_change)
    {
        $this->container['minimum_change'] = $minimum_change;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency type of the Auction. Bidders will give their bids on this currency.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets visible_rank
     *
     * @return float
     */
    public function getVisibleRank()
    {
        return $this->container['visible_rank'];
    }

    /**
     * Sets visible_rank
     *
     * @param float $visible_rank Allow bidders to see their rank in total amount.<br>Only available in British Auction types.
     *
     * @return $this
     */
    public function setVisibleRank($visible_rank)
    {
        $this->container['visible_rank'] = $visible_rank;

        return $this;
    }

    /**
     * Gets list_price
     *
     * @return float
     */
    public function getListPrice()
    {
        return $this->container['list_price'];
    }

    /**
     * Sets list_price
     *
     * @param float $list_price 
     *
     * @return $this
     */
    public function setListPrice($list_price)
    {
        $this->container['list_price'] = $list_price;

        return $this;
    }

    /**
     * Gets agreement_text
     *
     * @return string
     */
    public function getAgreementText()
    {
        return $this->container['agreement_text'];
    }

    /**
     * Sets agreement_text
     *
     * @param string $agreement_text Agreement Text that bidders have to accept before participating in the auction.
     *
     * @return $this
     */
    public function setAgreementText($agreement_text)
    {
        $this->container['agreement_text'] = $agreement_text;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Attached a note for your suppliers to sees.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string $delivery_date Delivery date in terms of YYYY-MM-DD HH:MM:SS format.
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets auto_time_extension
     *
     * @return object
     */
    public function getAutoTimeExtension()
    {
        return $this->container['auto_time_extension'];
    }

    /**
     * Sets auto_time_extension
     *
     * @param object $auto_time_extension auto_time_extension
     *
     * @return $this
     */
    public function setAutoTimeExtension($auto_time_extension)
    {
        $this->container['auto_time_extension'] = $auto_time_extension;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date Date of the auction of YYYY-MM-DD HH:MM:SS format.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return float
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param float $duration Duration of the auction.
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets default_duration
     *
     * @return float
     */
    public function getDefaultDuration()
    {
        return $this->container['default_duration'];
    }

    /**
     * Sets default_duration
     *
     * @param float $default_duration Duration of the auction is not included time extension.
     *
     * @return $this
     */
    public function setDefaultDuration($default_duration)
    {
        $this->container['default_duration'] = $default_duration;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date End Date of the auction of YYYY-MM-DD HH:MM:SS format.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets reminder
     *
     * @return object
     */
    public function getReminder()
    {
        return $this->container['reminder'];
    }

    /**
     * Sets reminder
     *
     * @param object $reminder Set an auto reminder to all bidders. System will send an email to all bidders to remind to submit a bid. If a bidder submitted a preliminary bid, reminder will skip.
     *
     * @return $this
     */
    public function setReminder($reminder)
    {
        $this->container['reminder'] = $reminder;

        return $this;
    }

    /**
     * Gets publish
     *
     * @return float
     */
    public function getPublish()
    {
        return $this->container['publish'];
    }

    /**
     * Sets publish
     *
     * @param float $publish Draft the auction or publish it. Published auctions will be visible by the bidders.<br>1:Publish<br>2:Draft
     *
     * @return $this
     */
    public function setPublish($publish)
    {
        $this->container['publish'] = $publish;

        return $this;
    }

    /**
     * Gets status
     *
     * @return float
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param float $status status of the auction.<br>1:Waiting (Auction opened, but not yet started.).<br>2:Active (Auction started and currently active.).<br>3:Approval process (Auction is ended and not approval process start yet.).<br>4:Completed (Procurement process is completed for auction.).
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date The auction start date on. YYYY-MM-DD HH:MM:SS format.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets transport_type
     *
     * @return string
     */
    public function getTransportType()
    {
        return $this->container['transport_type'];
    }

    /**
     * Sets transport_type
     *
     * @param string $transport_type If the value is empty, bidders will choose the own transport type.
     *
     * @return $this
     */
    public function setTransportType($transport_type)
    {
        $this->container['transport_type'] = $transport_type;

        return $this;
    }

    /**
     * Gets invite_mail_subject
     *
     * @return string
     */
    public function getInviteMailSubject()
    {
        return $this->container['invite_mail_subject'];
    }

    /**
     * Sets invite_mail_subject
     *
     * @param string $invite_mail_subject The subject of the outgoing mail when the auction is published.
     *
     * @return $this
     */
    public function setInviteMailSubject($invite_mail_subject)
    {
        $this->container['invite_mail_subject'] = $invite_mail_subject;

        return $this;
    }

    /**
     * Gets invite_mail_body
     *
     * @return string
     */
    public function getInviteMailBody()
    {
        return $this->container['invite_mail_body'];
    }

    /**
     * Sets invite_mail_body
     *
     * @param string $invite_mail_body The content of the outgoing mail when the auction is published.
     *
     * @return $this
     */
    public function setInviteMailBody($invite_mail_body)
    {
        $this->container['invite_mail_body'] = $invite_mail_body;

        return $this;
    }

    /**
     * Gets valid_until_date
     *
     * @return string
     */
    public function getValidUntilDate()
    {
        return $this->container['valid_until_date'];
    }

    /**
     * Sets valid_until_date
     *
     * @param string $valid_until_date If the value is empty, bidders will choose the validity date. YYYY-MM-DD HH:MM:SS format when is not empty.
     *
     * @return $this
     */
    public function setValidUntilDate($valid_until_date)
    {
        $this->container['valid_until_date'] = $valid_until_date;

        return $this;
    }

    /**
     * Gets payment_type_id
     *
     * @return string
     */
    public function getPaymentTypeId()
    {
        return $this->container['payment_type_id'];
    }

    /**
     * Sets payment_type_id
     *
     * @param string $payment_type_id If the value is empty, bidders will choose the own payment type.
     *
     * @return $this
     */
    public function setPaymentTypeId($payment_type_id)
    {
        $this->container['payment_type_id'] = $payment_type_id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return string
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param string $created_date Auction create date. YYYY-MM-DD HH:MM:SS format.
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets approval_process
     *
     * @return object
     */
    public function getApprovalProcess()
    {
        return $this->container['approval_process'];
    }

    /**
     * Sets approval_process
     *
     * @param object $approval_process Approval process data of the auction.
     *
     * @return $this
     */
    public function setApprovalProcess($approval_process)
    {
        $this->container['approval_process'] = $approval_process;

        return $this;
    }

    /**
     * Gets department
     *
     * @return object
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param object $department The auction department/project.
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id ID of the order if the auction converted to order.
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return object
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param object $creator Information of the user who created the auction.
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets time_control
     *
     * @return bool
     */
    public function getTimeControl()
    {
        return $this->container['time_control'];
    }

    /**
     * Sets time_control
     *
     * @param bool $time_control 
     *
     * @return $this
     */
    public function setTimeControl($time_control)
    {
        $this->container['time_control'] = $time_control;

        return $this;
    }

    /**
     * Gets auto_start
     *
     * @return float
     */
    public function getAutoStart()
    {
        return $this->container['auto_start'];
    }

    /**
     * Sets auto_start
     *
     * @param float $auto_start This auction to start automatically.
     *
     * @return $this
     */
    public function setAutoStart($auto_start)
    {
        $this->container['auto_start'] = $auto_start;

        return $this;
    }

    /**
     * Gets auto_end
     *
     * @return float
     */
    public function getAutoEnd()
    {
        return $this->container['auto_end'];
    }

    /**
     * Sets auto_end
     *
     * @param float $auto_end This auction to end automatically.
     *
     * @return $this
     */
    public function setAutoEnd($auto_end)
    {
        $this->container['auto_end'] = $auto_end;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return float
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param float $vat_rate Activated item-based vat rate of this auction.
     *
     * @return $this
     */
    public function setVatRate($vat_rate)
    {
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets bidder_vat_rate
     *
     * @return float
     */
    public function getBidderVatRate()
    {
        return $this->container['bidder_vat_rate'];
    }

    /**
     * Sets bidder_vat_rate
     *
     * @param float $bidder_vat_rate Activated bidders to provide item-based vat rates.
     *
     * @return $this
     */
    public function setBidderVatRate($bidder_vat_rate)
    {
        $this->container['bidder_vat_rate'] = $bidder_vat_rate;

        return $this;
    }

    /**
     * Gets item_files
     *
     * @return float
     */
    public function getItemFiles()
    {
        return $this->container['item_files'];
    }

    /**
     * Sets item_files
     *
     * @param float $item_files Indicated if you are attaching files to items.
     *
     * @return $this
     */
    public function setItemFiles($item_files)
    {
        $this->container['item_files'] = $item_files;

        return $this;
    }

    /**
     * Gets bid_change_type
     *
     * @return float
     */
    public function getBidChangeType()
    {
        return $this->container['bid_change_type'];
    }

    /**
     * Sets bid_change_type
     *
     * @param float $bid_change_type 1: Write bid amount.<br>2: Increase amount button.
     *
     * @return $this
     */
    public function setBidChangeType($bid_change_type)
    {
        $this->container['bid_change_type'] = $bid_change_type;

        return $this;
    }

    /**
     * Gets change_amounts
     *
     * @return object[]
     */
    public function getChangeAmounts()
    {
        return $this->container['change_amounts'];
    }

    /**
     * Sets change_amounts
     *
     * @param object[] $change_amounts If the bidChangeType is 2, the amounts of the buttons to be shown.
     *
     * @return $this
     */
    public function setChangeAmounts($change_amounts)
    {
        $this->container['change_amounts'] = $change_amounts;

        return $this;
    }

    /**
     * Gets sales_count
     *
     * @return float
     */
    public function getSalesCount()
    {
        return $this->container['sales_count'];
    }

    /**
     * Sets sales_count
     *
     * @param float $sales_count Number of items sold.
     *
     * @return $this
     */
    public function setSalesCount($sales_count)
    {
        $this->container['sales_count'] = $sales_count;

        return $this;
    }

    /**
     * Gets auction_items
     *
     * @return \Swagger\Client\Model\AuctionItemResponse[]
     */
    public function getAuctionItems()
    {
        return $this->container['auction_items'];
    }

    /**
     * Sets auction_items
     *
     * @param \Swagger\Client\Model\AuctionItemResponse[] $auction_items Items of the action.
     *
     * @return $this
     */
    public function setAuctionItems($auction_items)
    {
        $this->container['auction_items'] = $auction_items;

        return $this;
    }

    /**
     * Gets bidders
     *
     * @return \Swagger\Client\Model\AuctionBidderResponse[]
     */
    public function getBidders()
    {
        return $this->container['bidders'];
    }

    /**
     * Sets bidders
     *
     * @param \Swagger\Client\Model\AuctionBidderResponse[] $bidders Bidders of the action.
     *
     * @return $this
     */
    public function setBidders($bidders)
    {
        $this->container['bidders'] = $bidders;

        return $this;
    }

    /**
     * Gets bidder_groups
     *
     * @return \Swagger\Client\Model\AuctionBidderGroupResponse[]
     */
    public function getBidderGroups()
    {
        return $this->container['bidder_groups'];
    }

    /**
     * Sets bidder_groups
     *
     * @param \Swagger\Client\Model\AuctionBidderGroupResponse[] $bidder_groups Bidder groups of the action.
     *
     * @return $this
     */
    public function setBidderGroups($bidder_groups)
    {
        $this->container['bidder_groups'] = $bidder_groups;

        return $this;
    }

    /**
     * Gets auction_conditions
     *
     * @return \Swagger\Client\Model\AuctionConditionResponse[]
     */
    public function getAuctionConditions()
    {
        return $this->container['auction_conditions'];
    }

    /**
     * Sets auction_conditions
     *
     * @param \Swagger\Client\Model\AuctionConditionResponse[] $auction_conditions Conditions of the action.
     *
     * @return $this
     */
    public function setAuctionConditions($auction_conditions)
    {
        $this->container['auction_conditions'] = $auction_conditions;

        return $this;
    }

    /**
     * Gets auction_stages
     *
     * @return \Swagger\Client\Model\AuctionStageResponse[]
     */
    public function getAuctionStages()
    {
        return $this->container['auction_stages'];
    }

    /**
     * Sets auction_stages
     *
     * @param \Swagger\Client\Model\AuctionStageResponse[] $auction_stages Stages of the action.
     *
     * @return $this
     */
    public function setAuctionStages($auction_stages)
    {
        $this->container['auction_stages'] = $auction_stages;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\AuctionAddressResponse
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\AuctionAddressResponse $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets stage_rank
     *
     * @return object[]
     */
    public function getStageRank()
    {
        return $this->container['stage_rank'];
    }

    /**
     * Sets stage_rank
     *
     * @param object[] $stage_rank Stage rank data of the auction.
     *
     * @return $this
     */
    public function setStageRank($stage_rank)
    {
        $this->container['stage_rank'] = $stage_rank;

        return $this;
    }

    /**
     * Gets announcements
     *
     * @return \Swagger\Client\Model\AuctionAnnouncementResponse[]
     */
    public function getAnnouncements()
    {
        return $this->container['announcements'];
    }

    /**
     * Sets announcements
     *
     * @param \Swagger\Client\Model\AuctionAnnouncementResponse[] $announcements Announcements of the action.
     *
     * @return $this
     */
    public function setAnnouncements($announcements)
    {
        $this->container['announcements'] = $announcements;

        return $this;
    }

    /**
     * Gets server_time
     *
     * @return string
     */
    public function getServerTime()
    {
        return $this->container['server_time'];
    }

    /**
     * Sets server_time
     *
     * @param string $server_time The current time of the server.
     *
     * @return $this
     */
    public function setServerTime($server_time)
    {
        $this->container['server_time'] = $server_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


