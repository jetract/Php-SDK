<?php
/**
 * AuctionNew
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jetract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JETRACT
 *
 * <b>Main API (Application Programming Interface) of Jetract E-Auction and E-Procurement solutions.</b><br><i>Property of INARTS YAZILIM BILISIM INSAAT SAN. VE TIC. A.Åž.</i>
 *
 * OpenAPI spec version: 0.9.4
 * Contact: support-api@jetract.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.2
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jetract\Model;

use \ArrayAccess;
use \Jetract\ObjectSerializer;

/**
 * AuctionNew Class Doc Comment
 *
 * @category Class
 * @description This model defines the required input for creating a new Auction.
 * @package  Jetract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuctionNew implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuctionNew';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'type' => 'float',
        'date' => '\DateTime',
        'time' => 'string',
        'duration' => 'float',
        'budget' => 'float',
        'minimumChange' => 'float',
        'currency' => 'string',
        'agreementText' => 'string',
        'deliveryRequired' => 'float',
        'deliveryDate' => '\DateTime',
        'reminder' => '\Jetract\Model\AuctionNewReminder',
        'publish' => 'float',
        'listPrice' => 'float',
        'auctionItems' => '\Jetract\Model\AuctionNewAuctionItems[]',
        'auctionConditions' => '\Jetract\Model\AuctionNewAuctionConditions[]',
        'bidders' => '\Jetract\Model\AuctionNewBidders[]',
        'bidderGroups' => '\Jetract\Model\AuctionNewBidderGroups[]',
        'deliveryAddress' => 'string',
        'note' => 'string',
        'departmentID' => 'string',
        'autoTimeExtension' => '\Jetract\Model\AuctionNewAutoTimeExtension',
        'bidChangeLimit' => 'float',
        'requestDeliveryDateForItems' => 'float',
        'visibleOffers' => 'float',
        'visibleRank' => 'bool',
        'transportType' => 'string',
        'paymentType' => 'string',
        'validUntilDate' => '\DateTime',
        'bidLimit' => 'float',
        'inviteMailBody' => 'string',
        'inviteMailTitle' => 'string',
        'files' => '\Jetract\Model\AuctionAttachFilesFiles[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'type' => null,
        'date' => 'date',
        'time' => null,
        'duration' => null,
        'budget' => null,
        'minimumChange' => null,
        'currency' => null,
        'agreementText' => null,
        'deliveryRequired' => null,
        'deliveryDate' => 'date',
        'reminder' => null,
        'publish' => null,
        'listPrice' => null,
        'auctionItems' => null,
        'auctionConditions' => null,
        'bidders' => null,
        'bidderGroups' => null,
        'deliveryAddress' => null,
        'note' => null,
        'departmentID' => null,
        'autoTimeExtension' => null,
        'bidChangeLimit' => null,
        'requestDeliveryDateForItems' => null,
        'visibleOffers' => null,
        'visibleRank' => null,
        'transportType' => null,
        'paymentType' => null,
        'validUntilDate' => 'date',
        'bidLimit' => null,
        'inviteMailBody' => null,
        'inviteMailTitle' => null,
        'files' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'type' => 'type',
        'date' => 'date',
        'time' => 'time',
        'duration' => 'duration',
        'budget' => 'budget',
        'minimumChange' => 'minimumChange',
        'currency' => 'currency',
        'agreementText' => 'agreementText',
        'deliveryRequired' => 'deliveryRequired',
        'deliveryDate' => 'deliveryDate',
        'reminder' => 'reminder',
        'publish' => 'publish',
        'listPrice' => 'listPrice',
        'auctionItems' => 'auctionItems',
        'auctionConditions' => 'auctionConditions',
        'bidders' => 'bidders',
        'bidderGroups' => 'bidderGroups',
        'deliveryAddress' => 'deliveryAddress',
        'note' => 'note',
        'departmentID' => 'departmentID',
        'autoTimeExtension' => 'autoTimeExtension',
        'bidChangeLimit' => 'bidChangeLimit',
        'requestDeliveryDateForItems' => 'requestDeliveryDateForItems',
        'visibleOffers' => 'visibleOffers',
        'visibleRank' => 'visibleRank',
        'transportType' => 'transportType',
        'paymentType' => 'paymentType',
        'validUntilDate' => 'validUntilDate',
        'bidLimit' => 'bidLimit',
        'inviteMailBody' => 'inviteMailBody',
        'inviteMailTitle' => 'inviteMailTitle',
        'files' => 'files'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'type' => 'setType',
        'date' => 'setDate',
        'time' => 'setTime',
        'duration' => 'setDuration',
        'budget' => 'setBudget',
        'minimumChange' => 'setMinimumChange',
        'currency' => 'setCurrency',
        'agreementText' => 'setAgreementText',
        'deliveryRequired' => 'setDeliveryRequired',
        'deliveryDate' => 'setDeliveryDate',
        'reminder' => 'setReminder',
        'publish' => 'setPublish',
        'listPrice' => 'setListPrice',
        'auctionItems' => 'setAuctionItems',
        'auctionConditions' => 'setAuctionConditions',
        'bidders' => 'setBidders',
        'bidderGroups' => 'setBidderGroups',
        'deliveryAddress' => 'setDeliveryAddress',
        'note' => 'setNote',
        'departmentID' => 'setDepartmentID',
        'autoTimeExtension' => 'setAutoTimeExtension',
        'bidChangeLimit' => 'setBidChangeLimit',
        'requestDeliveryDateForItems' => 'setRequestDeliveryDateForItems',
        'visibleOffers' => 'setVisibleOffers',
        'visibleRank' => 'setVisibleRank',
        'transportType' => 'setTransportType',
        'paymentType' => 'setPaymentType',
        'validUntilDate' => 'setValidUntilDate',
        'bidLimit' => 'setBidLimit',
        'inviteMailBody' => 'setInviteMailBody',
        'inviteMailTitle' => 'setInviteMailTitle',
        'files' => 'setFiles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'type' => 'getType',
        'date' => 'getDate',
        'time' => 'getTime',
        'duration' => 'getDuration',
        'budget' => 'getBudget',
        'minimumChange' => 'getMinimumChange',
        'currency' => 'getCurrency',
        'agreementText' => 'getAgreementText',
        'deliveryRequired' => 'getDeliveryRequired',
        'deliveryDate' => 'getDeliveryDate',
        'reminder' => 'getReminder',
        'publish' => 'getPublish',
        'listPrice' => 'getListPrice',
        'auctionItems' => 'getAuctionItems',
        'auctionConditions' => 'getAuctionConditions',
        'bidders' => 'getBidders',
        'bidderGroups' => 'getBidderGroups',
        'deliveryAddress' => 'getDeliveryAddress',
        'note' => 'getNote',
        'departmentID' => 'getDepartmentID',
        'autoTimeExtension' => 'getAutoTimeExtension',
        'bidChangeLimit' => 'getBidChangeLimit',
        'requestDeliveryDateForItems' => 'getRequestDeliveryDateForItems',
        'visibleOffers' => 'getVisibleOffers',
        'visibleRank' => 'getVisibleRank',
        'transportType' => 'getTransportType',
        'paymentType' => 'getPaymentType',
        'validUntilDate' => 'getValidUntilDate',
        'bidLimit' => 'getBidLimit',
        'inviteMailBody' => 'getInviteMailBody',
        'inviteMailTitle' => 'getInviteMailTitle',
        'files' => 'getFiles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CURRENCY__TRY = 'TRY';
    const CURRENCY_EUR = 'EUR';
    const CURRENCY_USD = 'USD';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY__TRY,
            self::CURRENCY_EUR,
            self::CURRENCY_USD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : '13:00';
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['budget'] = isset($data['budget']) ? $data['budget'] : null;
        $this->container['minimumChange'] = isset($data['minimumChange']) ? $data['minimumChange'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['agreementText'] = isset($data['agreementText']) ? $data['agreementText'] : '<p>KatÄ±lÄ±mcÄ±sÄ± olacaÄŸÄ±mÄ±z E-ihaleye ait ihale dosyasÄ±nda bulunan t&uuml;m &ccedil;izim ve d&ouml;k&uuml;manlarÄ± eksiksiz olarak temin ettiÄŸimizi, incelediÄŸimizi ve bu ihale ÅŸartlarÄ± ile ihaleye katÄ±lÄ±m davetinizi kabul ederek teklif vereceÄŸimizi, e-ihaleye teklif verenin ÅŸirketimizin imza yetkilisi olduÄŸunu, e-ihalenin tarafÄ±mÄ±zca kazanÄ±lmasÄ± halinde 7 g&uuml;n i&ccedil;inde s&ouml;zleÅŸmeyi imzalayacaÄŸÄ±mÄ±zÄ±, s&ouml;zleÅŸmenin 7 g&uuml;n i&ccedil;inde imzalanmamasÄ± halinde ikinci en iyi teklif verene ihalenin verilebileceÄŸini kabul, beyan ve taahh&uuml;t ederiz. Gerekli durumlarda ihale s&uuml;resi iÅŸveren tarafÄ±ndan uzatÄ±labilmektedir.</p>';
        $this->container['deliveryRequired'] = isset($data['deliveryRequired']) ? $data['deliveryRequired'] : null;
        $this->container['deliveryDate'] = isset($data['deliveryDate']) ? $data['deliveryDate'] : null;
        $this->container['reminder'] = isset($data['reminder']) ? $data['reminder'] : null;
        $this->container['publish'] = isset($data['publish']) ? $data['publish'] : null;
        $this->container['listPrice'] = isset($data['listPrice']) ? $data['listPrice'] : null;
        $this->container['auctionItems'] = isset($data['auctionItems']) ? $data['auctionItems'] : null;
        $this->container['auctionConditions'] = isset($data['auctionConditions']) ? $data['auctionConditions'] : null;
        $this->container['bidders'] = isset($data['bidders']) ? $data['bidders'] : null;
        $this->container['bidderGroups'] = isset($data['bidderGroups']) ? $data['bidderGroups'] : null;
        $this->container['deliveryAddress'] = isset($data['deliveryAddress']) ? $data['deliveryAddress'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['departmentID'] = isset($data['departmentID']) ? $data['departmentID'] : null;
        $this->container['autoTimeExtension'] = isset($data['autoTimeExtension']) ? $data['autoTimeExtension'] : null;
        $this->container['bidChangeLimit'] = isset($data['bidChangeLimit']) ? $data['bidChangeLimit'] : null;
        $this->container['requestDeliveryDateForItems'] = isset($data['requestDeliveryDateForItems']) ? $data['requestDeliveryDateForItems'] : null;
        $this->container['visibleOffers'] = isset($data['visibleOffers']) ? $data['visibleOffers'] : null;
        $this->container['visibleRank'] = isset($data['visibleRank']) ? $data['visibleRank'] : false;
        $this->container['transportType'] = isset($data['transportType']) ? $data['transportType'] : null;
        $this->container['paymentType'] = isset($data['paymentType']) ? $data['paymentType'] : null;
        $this->container['validUntilDate'] = isset($data['validUntilDate']) ? $data['validUntilDate'] : null;
        $this->container['bidLimit'] = isset($data['bidLimit']) ? $data['bidLimit'] : null;
        $this->container['inviteMailBody'] = isset($data['inviteMailBody']) ? $data['inviteMailBody'] : null;
        $this->container['inviteMailTitle'] = isset($data['inviteMailTitle']) ? $data['inviteMailTitle'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['duration']) && ($this->container['duration'] > 10080)) {
            $invalidProperties[] = "invalid value for 'duration', must be smaller than or equal to 10080.";
        }

        if (!is_null($this->container['duration']) && ($this->container['duration'] < 0)) {
            $invalidProperties[] = "invalid value for 'duration', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'currency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['departmentID']) && !preg_match("/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/", $this->container['departmentID'])) {
            $invalidProperties[] = "invalid value for 'departmentID', must be conform to the pattern /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the auction.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return float
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param float $type Defines the auction type. Examples<br>1:Reverse Classic Auction<br>3:Reverse British Auction<br>4:Reverse Sealed Auction<br>5:Reverse Sealed Enveloped Auction
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Date of the auction of YYYY-MM-DD format.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string $time Time of the day when auction will be ready to start.
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return float
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param float $duration Duration of the auction. Max: 7 days.
     *
     * @return $this
     */
    public function setDuration($duration)
    {

        if (!is_null($duration) && ($duration > 10080)) {
            throw new \InvalidArgumentException('invalid value for $duration when calling AuctionNew., must be smaller than or equal to 10080.');
        }
        if (!is_null($duration) && ($duration < 0)) {
            throw new \InvalidArgumentException('invalid value for $duration when calling AuctionNew., must be bigger than or equal to 0.');
        }

        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets budget
     *
     * @return float
     */
    public function getBudget()
    {
        return $this->container['budget'];
    }

    /**
     * Sets budget
     *
     * @param float $budget Budget of the auction. Only used for internal reporting tools.
     *
     * @return $this
     */
    public function setBudget($budget)
    {
        $this->container['budget'] = $budget;

        return $this;
    }

    /**
     * Gets minimumChange
     *
     * @return float
     */
    public function getMinimumChange()
    {
        return $this->container['minimumChange'];
    }

    /**
     * Sets minimumChange
     *
     * @param float $minimumChange Minimum amount of change for the next bid.<br>Depending on the auction type it can be reverse or forward change.
     *
     * @return $this
     */
    public function setMinimumChange($minimumChange)
    {
        $this->container['minimumChange'] = $minimumChange;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency type of the Auction. Bidders will give their bids on this currency.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($currency) && !in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'currency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets agreementText
     *
     * @return string
     */
    public function getAgreementText()
    {
        return $this->container['agreementText'];
    }

    /**
     * Sets agreementText
     *
     * @param string $agreementText Agreement Text that bidders have to accept before participating in the auction.
     *
     * @return $this
     */
    public function setAgreementText($agreementText)
    {
        $this->container['agreementText'] = $agreementText;

        return $this;
    }

    /**
     * Gets deliveryRequired
     *
     * @return float
     */
    public function getDeliveryRequired()
    {
        return $this->container['deliveryRequired'];
    }

    /**
     * Sets deliveryRequired
     *
     * @param float $deliveryRequired Define if delivery is required for the auction.<br>1:Required<br>2:Not Required
     *
     * @return $this
     */
    public function setDeliveryRequired($deliveryRequired)
    {
        $this->container['deliveryRequired'] = $deliveryRequired;

        return $this;
    }

    /**
     * Gets deliveryDate
     *
     * @return \DateTime
     */
    public function getDeliveryDate()
    {
        return $this->container['deliveryDate'];
    }

    /**
     * Sets deliveryDate
     *
     * @param \DateTime $deliveryDate Delivery date in terms of YYYY-MM-DD format.
     *
     * @return $this
     */
    public function setDeliveryDate($deliveryDate)
    {
        $this->container['deliveryDate'] = $deliveryDate;

        return $this;
    }

    /**
     * Gets reminder
     *
     * @return \Jetract\Model\AuctionNewReminder
     */
    public function getReminder()
    {
        return $this->container['reminder'];
    }

    /**
     * Sets reminder
     *
     * @param \Jetract\Model\AuctionNewReminder $reminder reminder
     *
     * @return $this
     */
    public function setReminder($reminder)
    {
        $this->container['reminder'] = $reminder;

        return $this;
    }

    /**
     * Gets publish
     *
     * @return float
     */
    public function getPublish()
    {
        return $this->container['publish'];
    }

    /**
     * Sets publish
     *
     * @param float $publish Draft the auction or publish it. Published auctions will be visible by the bidders.<br>1:Publish<br>2:Draft
     *
     * @return $this
     */
    public function setPublish($publish)
    {
        $this->container['publish'] = $publish;

        return $this;
    }

    /**
     * Gets listPrice
     *
     * @return float
     */
    public function getListPrice()
    {
        return $this->container['listPrice'];
    }

    /**
     * Sets listPrice
     *
     * @param float $listPrice Indicate if you are attaching list prices to products.<br>1:Not Included<br>2:Included
     *
     * @return $this
     */
    public function setListPrice($listPrice)
    {
        $this->container['listPrice'] = $listPrice;

        return $this;
    }

    /**
     * Gets auctionItems
     *
     * @return \Jetract\Model\AuctionNewAuctionItems[]
     */
    public function getAuctionItems()
    {
        return $this->container['auctionItems'];
    }

    /**
     * Sets auctionItems
     *
     * @param \Jetract\Model\AuctionNewAuctionItems[] $auctionItems auctionItems
     *
     * @return $this
     */
    public function setAuctionItems($auctionItems)
    {
        $this->container['auctionItems'] = $auctionItems;

        return $this;
    }

    /**
     * Gets auctionConditions
     *
     * @return \Jetract\Model\AuctionNewAuctionConditions[]
     */
    public function getAuctionConditions()
    {
        return $this->container['auctionConditions'];
    }

    /**
     * Sets auctionConditions
     *
     * @param \Jetract\Model\AuctionNewAuctionConditions[] $auctionConditions auctionConditions
     *
     * @return $this
     */
    public function setAuctionConditions($auctionConditions)
    {
        $this->container['auctionConditions'] = $auctionConditions;

        return $this;
    }

    /**
     * Gets bidders
     *
     * @return \Jetract\Model\AuctionNewBidders[]
     */
    public function getBidders()
    {
        return $this->container['bidders'];
    }

    /**
     * Sets bidders
     *
     * @param \Jetract\Model\AuctionNewBidders[] $bidders bidders
     *
     * @return $this
     */
    public function setBidders($bidders)
    {
        $this->container['bidders'] = $bidders;

        return $this;
    }

    /**
     * Gets bidderGroups
     *
     * @return \Jetract\Model\AuctionNewBidderGroups[]
     */
    public function getBidderGroups()
    {
        return $this->container['bidderGroups'];
    }

    /**
     * Sets bidderGroups
     *
     * @param \Jetract\Model\AuctionNewBidderGroups[] $bidderGroups If you attach a bidder group to an auction. All members of this group can bid in this auction.
     *
     * @return $this
     */
    public function setBidderGroups($bidderGroups)
    {
        $this->container['bidderGroups'] = $bidderGroups;

        return $this;
    }

    /**
     * Gets deliveryAddress
     *
     * @return string
     */
    public function getDeliveryAddress()
    {
        return $this->container['deliveryAddress'];
    }

    /**
     * Sets deliveryAddress
     *
     * @param string $deliveryAddress Provide a delivery address to your auction.<br>Required only if deliveryRequired is true!
     *
     * @return $this
     */
    public function setDeliveryAddress($deliveryAddress)
    {
        $this->container['deliveryAddress'] = $deliveryAddress;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Attach a note for your bidders to see.<br>Example: Please place your bids with VAT included prices.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets departmentID
     *
     * @return string
     */
    public function getDepartmentID()
    {
        return $this->container['departmentID'];
    }

    /**
     * Sets departmentID
     *
     * @param string $departmentID Department or Project ID.
     *
     * @return $this
     */
    public function setDepartmentID($departmentID)
    {

        if (!is_null($departmentID) && (!preg_match("/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/", $departmentID))) {
            throw new \InvalidArgumentException("invalid value for $departmentID when calling AuctionNew., must conform to the pattern /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/.");
        }

        $this->container['departmentID'] = $departmentID;

        return $this;
    }

    /**
     * Gets autoTimeExtension
     *
     * @return \Jetract\Model\AuctionNewAutoTimeExtension
     */
    public function getAutoTimeExtension()
    {
        return $this->container['autoTimeExtension'];
    }

    /**
     * Sets autoTimeExtension
     *
     * @param \Jetract\Model\AuctionNewAutoTimeExtension $autoTimeExtension autoTimeExtension
     *
     * @return $this
     */
    public function setAutoTimeExtension($autoTimeExtension)
    {
        $this->container['autoTimeExtension'] = $autoTimeExtension;

        return $this;
    }

    /**
     * Gets bidChangeLimit
     *
     * @return float
     */
    public function getBidChangeLimit()
    {
        return $this->container['bidChangeLimit'];
    }

    /**
     * Sets bidChangeLimit
     *
     * @param float $bidChangeLimit Limit bidders to increase to decrease their bids depending on the Auction type.<br>1:No Limit<br>2:Apply Limit
     *
     * @return $this
     */
    public function setBidChangeLimit($bidChangeLimit)
    {
        $this->container['bidChangeLimit'] = $bidChangeLimit;

        return $this;
    }

    /**
     * Gets requestDeliveryDateForItems
     *
     * @return float
     */
    public function getRequestDeliveryDateForItems()
    {
        return $this->container['requestDeliveryDateForItems'];
    }

    /**
     * Sets requestDeliveryDateForItems
     *
     * @param float $requestDeliveryDateForItems 
     *
     * @return $this
     */
    public function setRequestDeliveryDateForItems($requestDeliveryDateForItems)
    {
        $this->container['requestDeliveryDateForItems'] = $requestDeliveryDateForItems;

        return $this;
    }

    /**
     * Gets visibleOffers
     *
     * @return float
     */
    public function getVisibleOffers()
    {
        return $this->container['visibleOffers'];
    }

    /**
     * Sets visibleOffers
     *
     * @param float $visibleOffers Number of lowest/highest number of offers to bidders.<br>Only available in Classic Auction types.
     *
     * @return $this
     */
    public function setVisibleOffers($visibleOffers)
    {
        $this->container['visibleOffers'] = $visibleOffers;

        return $this;
    }

    /**
     * Gets visibleRank
     *
     * @return bool
     */
    public function getVisibleRank()
    {
        return $this->container['visibleRank'];
    }

    /**
     * Sets visibleRank
     *
     * @param bool $visibleRank Allow bidders to see their rank in total amount.<br>Only available in British Auction types.
     *
     * @return $this
     */
    public function setVisibleRank($visibleRank)
    {
        $this->container['visibleRank'] = $visibleRank;

        return $this;
    }

    /**
     * Gets transportType
     *
     * @return string
     */
    public function getTransportType()
    {
        return $this->container['transportType'];
    }

    /**
     * Sets transportType
     *
     * @param string $transportType Transport type of the items used in Auction.
     *
     * @return $this
     */
    public function setTransportType($transportType)
    {
        $this->container['transportType'] = $transportType;

        return $this;
    }

    /**
     * Gets paymentType
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['paymentType'];
    }

    /**
     * Sets paymentType
     *
     * @param string $paymentType Payment type of the items used in Auction.
     *
     * @return $this
     */
    public function setPaymentType($paymentType)
    {
        $this->container['paymentType'] = $paymentType;

        return $this;
    }

    /**
     * Gets validUntilDate
     *
     * @return \DateTime
     */
    public function getValidUntilDate()
    {
        return $this->container['validUntilDate'];
    }

    /**
     * Sets validUntilDate
     *
     * @param \DateTime $validUntilDate Valid until date of the items used in Auction.
     *
     * @return $this
     */
    public function setValidUntilDate($validUntilDate)
    {
        $this->container['validUntilDate'] = $validUntilDate;

        return $this;
    }

    /**
     * Gets bidLimit
     *
     * @return float
     */
    public function getBidLimit()
    {
        return $this->container['bidLimit'];
    }

    /**
     * Sets bidLimit
     *
     * @param float $bidLimit Maximum/Minimum bid limit. Depending on the auction type it can be reverse or forward change.
     *
     * @return $this
     */
    public function setBidLimit($bidLimit)
    {
        $this->container['bidLimit'] = $bidLimit;

        return $this;
    }

    /**
     * Gets inviteMailBody
     *
     * @return string
     */
    public function getInviteMailBody()
    {
        return $this->container['inviteMailBody'];
    }

    /**
     * Sets inviteMailBody
     *
     * @param string $inviteMailBody The content of the outgoing mail when the auction is published.
     *
     * @return $this
     */
    public function setInviteMailBody($inviteMailBody)
    {
        $this->container['inviteMailBody'] = $inviteMailBody;

        return $this;
    }

    /**
     * Gets inviteMailTitle
     *
     * @return string
     */
    public function getInviteMailTitle()
    {
        return $this->container['inviteMailTitle'];
    }

    /**
     * Sets inviteMailTitle
     *
     * @param string $inviteMailTitle The subject of the outgoing mail when the auction is published.
     *
     * @return $this
     */
    public function setInviteMailTitle($inviteMailTitle)
    {
        $this->container['inviteMailTitle'] = $inviteMailTitle;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \Jetract\Model\AuctionAttachFilesFiles[]
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \Jetract\Model\AuctionAttachFilesFiles[] $files Attach files in the auction.
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


