<?php
/**
 * BidderAuctionInformationResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JETRACT
 *
 * JETRACT MAIN API
 *
 * OpenAPI spec version: 0.9.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BidderAuctionInformationResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BidderAuctionInformationResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BidderAuctionInformationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'code' => 'string',
        'name' => 'string',
        'type' => 'float',
        'bid_limit' => 'float',
        'minimum_change' => 'float',
        'currency' => 'string',
        'visible_rank' => 'float',
        'list_price' => 'float',
        'agreement_text' => 'string',
        'note' => 'string',
        'delivery_date' => 'string',
        'date' => 'string',
        'duration' => 'float',
        'default_duration' => 'float',
        'end_date' => 'string',
        'status' => 'float',
        'start_date' => 'string',
        'transport_type' => 'string',
        'valid_until_date' => 'string',
        'payment_type_id' => 'string',
        'created_date' => 'string',
        'creator' => '\Swagger\Client\Model\AuctionsInformationResponseCreator',
        'vat_rate' => 'float',
        'bidder_vat_rate' => 'float',
        'item_files' => 'float',
        'request_delivery_date_for_items' => 'float',
        'agreement_approve' => 'float',
        'visible_offers' => 'float',
        'auction_current_price' => 'float',
        'company' => '\Swagger\Client\Model\BidderAuctionsInformationResponseCompany',
        'bid_change_type' => 'float',
        'change_amounts' => '\Swagger\Client\Model\AuctionsInformationResponseChangeAmounts[]',
        'sales_type' => 'float',
        'sales_count' => 'float',
        'auction_items' => '\Swagger\Client\Model\BidderAuctionItemResponse[]',
        'auction_conditions' => '\Swagger\Client\Model\BidderAuctionConditionResponse[]',
        'offers' => '\Swagger\Client\Model\BidderAuctionOfferResponse[]',
        'announcements' => '\Swagger\Client\Model\BidderAuctionAnnouncementResponse[]',
        'general_rank' => 'float',
        'lowest_offers' => '\Swagger\Client\Model\BidderAuctionInformationResponseLowestOffers[]',
        'elimination' => 'bool',
        'elimination_date' => 'string',
        'server_time' => 'string',
        'time_control' => 'bool',
        'can_bid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'code' => null,
        'name' => null,
        'type' => null,
        'bid_limit' => null,
        'minimum_change' => null,
        'currency' => null,
        'visible_rank' => null,
        'list_price' => null,
        'agreement_text' => null,
        'note' => null,
        'delivery_date' => null,
        'date' => null,
        'duration' => null,
        'default_duration' => null,
        'end_date' => null,
        'status' => null,
        'start_date' => null,
        'transport_type' => null,
        'valid_until_date' => null,
        'payment_type_id' => null,
        'created_date' => null,
        'creator' => null,
        'vat_rate' => null,
        'bidder_vat_rate' => null,
        'item_files' => null,
        'request_delivery_date_for_items' => null,
        'agreement_approve' => null,
        'visible_offers' => null,
        'auction_current_price' => null,
        'company' => null,
        'bid_change_type' => null,
        'change_amounts' => null,
        'sales_type' => null,
        'sales_count' => null,
        'auction_items' => null,
        'auction_conditions' => null,
        'offers' => null,
        'announcements' => null,
        'general_rank' => null,
        'lowest_offers' => null,
        'elimination' => null,
        'elimination_date' => null,
        'server_time' => null,
        'time_control' => null,
        'can_bid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'code' => 'code',
        'name' => 'name',
        'type' => 'type',
        'bid_limit' => 'bidLimit',
        'minimum_change' => 'minimumChange',
        'currency' => 'currency',
        'visible_rank' => 'visibleRank',
        'list_price' => 'listPrice',
        'agreement_text' => 'agreementText',
        'note' => 'note',
        'delivery_date' => 'deliveryDate',
        'date' => 'date',
        'duration' => 'duration',
        'default_duration' => 'defaultDuration',
        'end_date' => 'endDate',
        'status' => 'status',
        'start_date' => 'startDate',
        'transport_type' => 'transportType',
        'valid_until_date' => 'validUntilDate',
        'payment_type_id' => 'paymentTypeID',
        'created_date' => 'createdDate',
        'creator' => 'creator',
        'vat_rate' => 'vatRate',
        'bidder_vat_rate' => 'bidderVatRate',
        'item_files' => 'itemFiles',
        'request_delivery_date_for_items' => 'requestDeliveryDateForItems',
        'agreement_approve' => 'agreementApprove',
        'visible_offers' => 'visibleOffers',
        'auction_current_price' => 'auctionCurrentPrice',
        'company' => 'company',
        'bid_change_type' => 'bidChangeType',
        'change_amounts' => 'changeAmounts',
        'sales_type' => 'salesType',
        'sales_count' => 'salesCount',
        'auction_items' => 'auctionItems',
        'auction_conditions' => 'auctionConditions',
        'offers' => 'offers',
        'announcements' => 'announcements',
        'general_rank' => 'generalRank',
        'lowest_offers' => 'lowestOffers',
        'elimination' => 'elimination',
        'elimination_date' => 'eliminationDate',
        'server_time' => 'serverTime',
        'time_control' => 'timeControl',
        'can_bid' => 'canBid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'name' => 'setName',
        'type' => 'setType',
        'bid_limit' => 'setBidLimit',
        'minimum_change' => 'setMinimumChange',
        'currency' => 'setCurrency',
        'visible_rank' => 'setVisibleRank',
        'list_price' => 'setListPrice',
        'agreement_text' => 'setAgreementText',
        'note' => 'setNote',
        'delivery_date' => 'setDeliveryDate',
        'date' => 'setDate',
        'duration' => 'setDuration',
        'default_duration' => 'setDefaultDuration',
        'end_date' => 'setEndDate',
        'status' => 'setStatus',
        'start_date' => 'setStartDate',
        'transport_type' => 'setTransportType',
        'valid_until_date' => 'setValidUntilDate',
        'payment_type_id' => 'setPaymentTypeId',
        'created_date' => 'setCreatedDate',
        'creator' => 'setCreator',
        'vat_rate' => 'setVatRate',
        'bidder_vat_rate' => 'setBidderVatRate',
        'item_files' => 'setItemFiles',
        'request_delivery_date_for_items' => 'setRequestDeliveryDateForItems',
        'agreement_approve' => 'setAgreementApprove',
        'visible_offers' => 'setVisibleOffers',
        'auction_current_price' => 'setAuctionCurrentPrice',
        'company' => 'setCompany',
        'bid_change_type' => 'setBidChangeType',
        'change_amounts' => 'setChangeAmounts',
        'sales_type' => 'setSalesType',
        'sales_count' => 'setSalesCount',
        'auction_items' => 'setAuctionItems',
        'auction_conditions' => 'setAuctionConditions',
        'offers' => 'setOffers',
        'announcements' => 'setAnnouncements',
        'general_rank' => 'setGeneralRank',
        'lowest_offers' => 'setLowestOffers',
        'elimination' => 'setElimination',
        'elimination_date' => 'setEliminationDate',
        'server_time' => 'setServerTime',
        'time_control' => 'setTimeControl',
        'can_bid' => 'setCanBid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'name' => 'getName',
        'type' => 'getType',
        'bid_limit' => 'getBidLimit',
        'minimum_change' => 'getMinimumChange',
        'currency' => 'getCurrency',
        'visible_rank' => 'getVisibleRank',
        'list_price' => 'getListPrice',
        'agreement_text' => 'getAgreementText',
        'note' => 'getNote',
        'delivery_date' => 'getDeliveryDate',
        'date' => 'getDate',
        'duration' => 'getDuration',
        'default_duration' => 'getDefaultDuration',
        'end_date' => 'getEndDate',
        'status' => 'getStatus',
        'start_date' => 'getStartDate',
        'transport_type' => 'getTransportType',
        'valid_until_date' => 'getValidUntilDate',
        'payment_type_id' => 'getPaymentTypeId',
        'created_date' => 'getCreatedDate',
        'creator' => 'getCreator',
        'vat_rate' => 'getVatRate',
        'bidder_vat_rate' => 'getBidderVatRate',
        'item_files' => 'getItemFiles',
        'request_delivery_date_for_items' => 'getRequestDeliveryDateForItems',
        'agreement_approve' => 'getAgreementApprove',
        'visible_offers' => 'getVisibleOffers',
        'auction_current_price' => 'getAuctionCurrentPrice',
        'company' => 'getCompany',
        'bid_change_type' => 'getBidChangeType',
        'change_amounts' => 'getChangeAmounts',
        'sales_type' => 'getSalesType',
        'sales_count' => 'getSalesCount',
        'auction_items' => 'getAuctionItems',
        'auction_conditions' => 'getAuctionConditions',
        'offers' => 'getOffers',
        'announcements' => 'getAnnouncements',
        'general_rank' => 'getGeneralRank',
        'lowest_offers' => 'getLowestOffers',
        'elimination' => 'getElimination',
        'elimination_date' => 'getEliminationDate',
        'server_time' => 'getServerTime',
        'time_control' => 'getTimeControl',
        'can_bid' => 'getCanBid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['bid_limit'] = isset($data['bid_limit']) ? $data['bid_limit'] : null;
        $this->container['minimum_change'] = isset($data['minimum_change']) ? $data['minimum_change'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['visible_rank'] = isset($data['visible_rank']) ? $data['visible_rank'] : null;
        $this->container['list_price'] = isset($data['list_price']) ? $data['list_price'] : null;
        $this->container['agreement_text'] = isset($data['agreement_text']) ? $data['agreement_text'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['default_duration'] = isset($data['default_duration']) ? $data['default_duration'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['transport_type'] = isset($data['transport_type']) ? $data['transport_type'] : null;
        $this->container['valid_until_date'] = isset($data['valid_until_date']) ? $data['valid_until_date'] : null;
        $this->container['payment_type_id'] = isset($data['payment_type_id']) ? $data['payment_type_id'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['vat_rate'] = isset($data['vat_rate']) ? $data['vat_rate'] : null;
        $this->container['bidder_vat_rate'] = isset($data['bidder_vat_rate']) ? $data['bidder_vat_rate'] : null;
        $this->container['item_files'] = isset($data['item_files']) ? $data['item_files'] : null;
        $this->container['request_delivery_date_for_items'] = isset($data['request_delivery_date_for_items']) ? $data['request_delivery_date_for_items'] : null;
        $this->container['agreement_approve'] = isset($data['agreement_approve']) ? $data['agreement_approve'] : null;
        $this->container['visible_offers'] = isset($data['visible_offers']) ? $data['visible_offers'] : null;
        $this->container['auction_current_price'] = isset($data['auction_current_price']) ? $data['auction_current_price'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['bid_change_type'] = isset($data['bid_change_type']) ? $data['bid_change_type'] : null;
        $this->container['change_amounts'] = isset($data['change_amounts']) ? $data['change_amounts'] : null;
        $this->container['sales_type'] = isset($data['sales_type']) ? $data['sales_type'] : null;
        $this->container['sales_count'] = isset($data['sales_count']) ? $data['sales_count'] : null;
        $this->container['auction_items'] = isset($data['auction_items']) ? $data['auction_items'] : null;
        $this->container['auction_conditions'] = isset($data['auction_conditions']) ? $data['auction_conditions'] : null;
        $this->container['offers'] = isset($data['offers']) ? $data['offers'] : null;
        $this->container['announcements'] = isset($data['announcements']) ? $data['announcements'] : null;
        $this->container['general_rank'] = isset($data['general_rank']) ? $data['general_rank'] : null;
        $this->container['lowest_offers'] = isset($data['lowest_offers']) ? $data['lowest_offers'] : null;
        $this->container['elimination'] = isset($data['elimination']) ? $data['elimination'] : null;
        $this->container['elimination_date'] = isset($data['elimination_date']) ? $data['elimination_date'] : null;
        $this->container['server_time'] = isset($data['server_time']) ? $data['server_time'] : null;
        $this->container['time_control'] = isset($data['time_control']) ? $data['time_control'] : null;
        $this->container['can_bid'] = isset($data['can_bid']) ? $data['can_bid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the auction.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Code of the auction. Automatically generated.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the auction.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return float
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param float $type Defines the auction type. Examples<br>1:Reverse Classic Auction<br>3:Reverse British Auction<br>4:Reverse Sealed Auction<br>5:Reverse Sealed Enveloped Auction
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets bid_limit
     *
     * @return float
     */
    public function getBidLimit()
    {
        return $this->container['bid_limit'];
    }

    /**
     * Sets bid_limit
     *
     * @param float $bid_limit Maximum/Minimum bid limit. Depending on the auction type it can be reverse or forward change.<br>When not specified, returns zero value.
     *
     * @return $this
     */
    public function setBidLimit($bid_limit)
    {
        $this->container['bid_limit'] = $bid_limit;

        return $this;
    }

    /**
     * Gets minimum_change
     *
     * @return float
     */
    public function getMinimumChange()
    {
        return $this->container['minimum_change'];
    }

    /**
     * Sets minimum_change
     *
     * @param float $minimum_change Minimum amount of change for the next bid.<br>Depending on the auction type it can be reverse or forward change.<br>When not specified, returns zero value.
     *
     * @return $this
     */
    public function setMinimumChange($minimum_change)
    {
        $this->container['minimum_change'] = $minimum_change;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency type of the Auction. Bidders will give their bids on this currency.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets visible_rank
     *
     * @return float
     */
    public function getVisibleRank()
    {
        return $this->container['visible_rank'];
    }

    /**
     * Sets visible_rank
     *
     * @param float $visible_rank Allow bidders to see their rank in total amount.<br>Only available in British Auction types.
     *
     * @return $this
     */
    public function setVisibleRank($visible_rank)
    {
        $this->container['visible_rank'] = $visible_rank;

        return $this;
    }

    /**
     * Gets list_price
     *
     * @return float
     */
    public function getListPrice()
    {
        return $this->container['list_price'];
    }

    /**
     * Sets list_price
     *
     * @param float $list_price 
     *
     * @return $this
     */
    public function setListPrice($list_price)
    {
        $this->container['list_price'] = $list_price;

        return $this;
    }

    /**
     * Gets agreement_text
     *
     * @return string
     */
    public function getAgreementText()
    {
        return $this->container['agreement_text'];
    }

    /**
     * Sets agreement_text
     *
     * @param string $agreement_text Agreement Text that bidders have to accept before participating in the auction.
     *
     * @return $this
     */
    public function setAgreementText($agreement_text)
    {
        $this->container['agreement_text'] = $agreement_text;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Attached a note for your suppliers to sees.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string $delivery_date Delivery date in terms of YYYY-MM-DD HH:MM:SS format.
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date Date of the auction of YYYY-MM-DD HH:MM:SS format.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return float
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param float $duration Duration of the auction.
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets default_duration
     *
     * @return float
     */
    public function getDefaultDuration()
    {
        return $this->container['default_duration'];
    }

    /**
     * Sets default_duration
     *
     * @param float $default_duration Duration of the auction is not included time extension.
     *
     * @return $this
     */
    public function setDefaultDuration($default_duration)
    {
        $this->container['default_duration'] = $default_duration;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date End Date of the auction of YYYY-MM-DD HH:MM:SS format.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return float
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param float $status status of the auction.<br>1:Waiting (Auction opened, but not yet started.).<br>2:Active (Auction started and currently active.).<br>3:Approval process (Auction is ended and not approval process start yet.).<br>4:Completed (Procurement process is completed for auction.).
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date The auction start date on. YYYY-MM-DD HH:MM:SS format.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets transport_type
     *
     * @return string
     */
    public function getTransportType()
    {
        return $this->container['transport_type'];
    }

    /**
     * Sets transport_type
     *
     * @param string $transport_type If the value is empty, bidders will choose the own transport type.
     *
     * @return $this
     */
    public function setTransportType($transport_type)
    {
        $this->container['transport_type'] = $transport_type;

        return $this;
    }

    /**
     * Gets valid_until_date
     *
     * @return string
     */
    public function getValidUntilDate()
    {
        return $this->container['valid_until_date'];
    }

    /**
     * Sets valid_until_date
     *
     * @param string $valid_until_date If the value is empty, bidders will choose the validity date. YYYY-MM-DD HH:MM:SS format when is not empty.
     *
     * @return $this
     */
    public function setValidUntilDate($valid_until_date)
    {
        $this->container['valid_until_date'] = $valid_until_date;

        return $this;
    }

    /**
     * Gets payment_type_id
     *
     * @return string
     */
    public function getPaymentTypeId()
    {
        return $this->container['payment_type_id'];
    }

    /**
     * Sets payment_type_id
     *
     * @param string $payment_type_id If the value is empty, bidders will choose the own payment type.
     *
     * @return $this
     */
    public function setPaymentTypeId($payment_type_id)
    {
        $this->container['payment_type_id'] = $payment_type_id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return string
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param string $created_date Auction create date. YYYY-MM-DD HH:MM:SS format.
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \Swagger\Client\Model\AuctionsInformationResponseCreator
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \Swagger\Client\Model\AuctionsInformationResponseCreator $creator creator
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return float
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param float $vat_rate Activated item-based vat rate of this auction.
     *
     * @return $this
     */
    public function setVatRate($vat_rate)
    {
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets bidder_vat_rate
     *
     * @return float
     */
    public function getBidderVatRate()
    {
        return $this->container['bidder_vat_rate'];
    }

    /**
     * Sets bidder_vat_rate
     *
     * @param float $bidder_vat_rate Activated bidders to provide item-based vat rates.
     *
     * @return $this
     */
    public function setBidderVatRate($bidder_vat_rate)
    {
        $this->container['bidder_vat_rate'] = $bidder_vat_rate;

        return $this;
    }

    /**
     * Gets item_files
     *
     * @return float
     */
    public function getItemFiles()
    {
        return $this->container['item_files'];
    }

    /**
     * Sets item_files
     *
     * @param float $item_files Indicated if you are attaching files to items.
     *
     * @return $this
     */
    public function setItemFiles($item_files)
    {
        $this->container['item_files'] = $item_files;

        return $this;
    }

    /**
     * Gets request_delivery_date_for_items
     *
     * @return float
     */
    public function getRequestDeliveryDateForItems()
    {
        return $this->container['request_delivery_date_for_items'];
    }

    /**
     * Sets request_delivery_date_for_items
     *
     * @param float $request_delivery_date_for_items Indicated if you are requesting delivery date to items.
     *
     * @return $this
     */
    public function setRequestDeliveryDateForItems($request_delivery_date_for_items)
    {
        $this->container['request_delivery_date_for_items'] = $request_delivery_date_for_items;

        return $this;
    }

    /**
     * Gets agreement_approve
     *
     * @return float
     */
    public function getAgreementApprove()
    {
        return $this->container['agreement_approve'];
    }

    /**
     * Sets agreement_approve
     *
     * @param float $agreement_approve Bidders approve of the agreement text to the auction. <br>0:Not yet approve. <br>1: Approved. <br>2: Not approved.
     *
     * @return $this
     */
    public function setAgreementApprove($agreement_approve)
    {
        $this->container['agreement_approve'] = $agreement_approve;

        return $this;
    }

    /**
     * Gets visible_offers
     *
     * @return float
     */
    public function getVisibleOffers()
    {
        return $this->container['visible_offers'];
    }

    /**
     * Sets visible_offers
     *
     * @param float $visible_offers Number of lowest/highest number of offers to bidders.<br>Only available in Classic Auction types.
     *
     * @return $this
     */
    public function setVisibleOffers($visible_offers)
    {
        $this->container['visible_offers'] = $visible_offers;

        return $this;
    }

    /**
     * Gets auction_current_price
     *
     * @return float
     */
    public function getAuctionCurrentPrice()
    {
        return $this->container['auction_current_price'];
    }

    /**
     * Sets auction_current_price
     *
     * @param float $auction_current_price auction_current_price
     *
     * @return $this
     */
    public function setAuctionCurrentPrice($auction_current_price)
    {
        $this->container['auction_current_price'] = $auction_current_price;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \Swagger\Client\Model\BidderAuctionsInformationResponseCompany
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \Swagger\Client\Model\BidderAuctionsInformationResponseCompany $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets bid_change_type
     *
     * @return float
     */
    public function getBidChangeType()
    {
        return $this->container['bid_change_type'];
    }

    /**
     * Sets bid_change_type
     *
     * @param float $bid_change_type 1: Write bid amount.<br>2: Increase amount button.
     *
     * @return $this
     */
    public function setBidChangeType($bid_change_type)
    {
        $this->container['bid_change_type'] = $bid_change_type;

        return $this;
    }

    /**
     * Gets change_amounts
     *
     * @return \Swagger\Client\Model\AuctionsInformationResponseChangeAmounts[]
     */
    public function getChangeAmounts()
    {
        return $this->container['change_amounts'];
    }

    /**
     * Sets change_amounts
     *
     * @param \Swagger\Client\Model\AuctionsInformationResponseChangeAmounts[] $change_amounts If the bidChangeType is 2, the amounts of the buttons to be shown.
     *
     * @return $this
     */
    public function setChangeAmounts($change_amounts)
    {
        $this->container['change_amounts'] = $change_amounts;

        return $this;
    }

    /**
     * Gets sales_type
     *
     * @return float
     */
    public function getSalesType()
    {
        return $this->container['sales_type'];
    }

    /**
     * Sets sales_type
     *
     * @param float $sales_type Forward auction sales type. 1: Not Sold.<br>2: Sold.
     *
     * @return $this
     */
    public function setSalesType($sales_type)
    {
        $this->container['sales_type'] = $sales_type;

        return $this;
    }

    /**
     * Gets sales_count
     *
     * @return float
     */
    public function getSalesCount()
    {
        return $this->container['sales_count'];
    }

    /**
     * Sets sales_count
     *
     * @param float $sales_count Number of items sold.
     *
     * @return $this
     */
    public function setSalesCount($sales_count)
    {
        $this->container['sales_count'] = $sales_count;

        return $this;
    }

    /**
     * Gets auction_items
     *
     * @return \Swagger\Client\Model\BidderAuctionItemResponse[]
     */
    public function getAuctionItems()
    {
        return $this->container['auction_items'];
    }

    /**
     * Sets auction_items
     *
     * @param \Swagger\Client\Model\BidderAuctionItemResponse[] $auction_items Items of the action.
     *
     * @return $this
     */
    public function setAuctionItems($auction_items)
    {
        $this->container['auction_items'] = $auction_items;

        return $this;
    }

    /**
     * Gets auction_conditions
     *
     * @return \Swagger\Client\Model\BidderAuctionConditionResponse[]
     */
    public function getAuctionConditions()
    {
        return $this->container['auction_conditions'];
    }

    /**
     * Sets auction_conditions
     *
     * @param \Swagger\Client\Model\BidderAuctionConditionResponse[] $auction_conditions Conditions of the action.
     *
     * @return $this
     */
    public function setAuctionConditions($auction_conditions)
    {
        $this->container['auction_conditions'] = $auction_conditions;

        return $this;
    }

    /**
     * Gets offers
     *
     * @return \Swagger\Client\Model\BidderAuctionOfferResponse[]
     */
    public function getOffers()
    {
        return $this->container['offers'];
    }

    /**
     * Sets offers
     *
     * @param \Swagger\Client\Model\BidderAuctionOfferResponse[] $offers Offers of the action.
     *
     * @return $this
     */
    public function setOffers($offers)
    {
        $this->container['offers'] = $offers;

        return $this;
    }

    /**
     * Gets announcements
     *
     * @return \Swagger\Client\Model\BidderAuctionAnnouncementResponse[]
     */
    public function getAnnouncements()
    {
        return $this->container['announcements'];
    }

    /**
     * Sets announcements
     *
     * @param \Swagger\Client\Model\BidderAuctionAnnouncementResponse[] $announcements Announcements of the action.
     *
     * @return $this
     */
    public function setAnnouncements($announcements)
    {
        $this->container['announcements'] = $announcements;

        return $this;
    }

    /**
     * Gets general_rank
     *
     * @return float
     */
    public function getGeneralRank()
    {
        return $this->container['general_rank'];
    }

    /**
     * Sets general_rank
     *
     * @param float $general_rank General rank of the bid. <br>Only available in British Auction types.
     *
     * @return $this
     */
    public function setGeneralRank($general_rank)
    {
        $this->container['general_rank'] = $general_rank;

        return $this;
    }

    /**
     * Gets lowest_offers
     *
     * @return \Swagger\Client\Model\BidderAuctionInformationResponseLowestOffers[]
     */
    public function getLowestOffers()
    {
        return $this->container['lowest_offers'];
    }

    /**
     * Sets lowest_offers
     *
     * @param \Swagger\Client\Model\BidderAuctionInformationResponseLowestOffers[] $lowest_offers Lowest offers of the auction. <br>Only available in Classic Auction types.
     *
     * @return $this
     */
    public function setLowestOffers($lowest_offers)
    {
        $this->container['lowest_offers'] = $lowest_offers;

        return $this;
    }

    /**
     * Gets elimination
     *
     * @return bool
     */
    public function getElimination()
    {
        return $this->container['elimination'];
    }

    /**
     * Sets elimination
     *
     * @param bool $elimination Bidder's elimination status. <br>Only available in Reverse Sealed Auction types.
     *
     * @return $this
     */
    public function setElimination($elimination)
    {
        $this->container['elimination'] = $elimination;

        return $this;
    }

    /**
     * Gets elimination_date
     *
     * @return string
     */
    public function getEliminationDate()
    {
        return $this->container['elimination_date'];
    }

    /**
     * Sets elimination_date
     *
     * @param string $elimination_date Bidder's eliminated date of YYYY-MM-DD HH:MM:SS format. <br>Only available in Reverse Sealed Auction types.
     *
     * @return $this
     */
    public function setEliminationDate($elimination_date)
    {
        $this->container['elimination_date'] = $elimination_date;

        return $this;
    }

    /**
     * Gets server_time
     *
     * @return string
     */
    public function getServerTime()
    {
        return $this->container['server_time'];
    }

    /**
     * Sets server_time
     *
     * @param string $server_time The current time of the server.
     *
     * @return $this
     */
    public function setServerTime($server_time)
    {
        $this->container['server_time'] = $server_time;

        return $this;
    }

    /**
     * Gets time_control
     *
     * @return bool
     */
    public function getTimeControl()
    {
        return $this->container['time_control'];
    }

    /**
     * Sets time_control
     *
     * @param bool $time_control time_control
     *
     * @return $this
     */
    public function setTimeControl($time_control)
    {
        $this->container['time_control'] = $time_control;

        return $this;
    }

    /**
     * Gets can_bid
     *
     * @return string
     */
    public function getCanBid()
    {
        return $this->container['can_bid'];
    }

    /**
     * Sets can_bid
     *
     * @param string $can_bid Type of The Bidding Permission. <br>1: Can Bid. <br>2: Cannot Bid.
     *
     * @return $this
     */
    public function setCanBid($can_bid)
    {
        $this->container['can_bid'] = $can_bid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


