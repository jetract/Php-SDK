<?php
/**
 * AuctionNew
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JETRACT
 *
 * JETRACT MAIN API
 *
 * OpenAPI spec version: 0.9.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuctionNew Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuctionNew implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuctionNew';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'type' => 'float',
        'date' => 'string',
        'time' => 'string',
        'duration' => 'float',
        'budget' => 'string',
        'minimum_change' => 'string',
        'currency' => 'string',
        'agreement_text' => 'string',
        'delivery_required' => 'float',
        'delivery_date' => 'string',
        'reminder' => '\Swagger\Client\Model\AuctionNewReminder',
        'publish' => 'float',
        'list_price' => 'float',
        'auction_items' => '\Swagger\Client\Model\AuctionNewAuctionItems[]',
        'auction_conditions' => '\Swagger\Client\Model\AuctionNewAuctionConditions[]',
        'bidders' => '\Swagger\Client\Model\AuctionNewBidders[]',
        'bidder_groups' => '\Swagger\Client\Model\AuctionNewBidderGroups[]',
        'delivery_address' => 'string',
        'note' => 'string',
        'department_id' => 'string',
        'auto_time_extension' => '\Swagger\Client\Model\AuctionNewAutoTimeExtension',
        'bid_change_limit' => 'float',
        'request_delivery_date_for_items' => 'string',
        'visible_offers' => 'string',
        'visible_rank' => 'float',
        'transport_type' => 'string',
        'payment_type' => 'string',
        'valid_until_date' => 'string',
        'bid_limit' => 'float',
        'invite_mail_body' => 'string',
        'invite_mail_subject' => 'string',
        'files' => '\Swagger\Client\Model\ProcurementRequestNewFiles[]',
        'auto_start' => 'float',
        'auto_end' => 'float',
        'vat_rate' => 'float',
        'bidder_vat_rate' => 'float',
        'item_files' => 'float',
        'bid_change_type' => 'float',
        'change_amounts' => '\Swagger\Client\Model\AuctionNewChangeAmounts[]',
        'time_type' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'type' => null,
        'date' => null,
        'time' => null,
        'duration' => null,
        'budget' => null,
        'minimum_change' => null,
        'currency' => null,
        'agreement_text' => null,
        'delivery_required' => null,
        'delivery_date' => null,
        'reminder' => null,
        'publish' => null,
        'list_price' => null,
        'auction_items' => null,
        'auction_conditions' => null,
        'bidders' => null,
        'bidder_groups' => null,
        'delivery_address' => null,
        'note' => null,
        'department_id' => null,
        'auto_time_extension' => null,
        'bid_change_limit' => null,
        'request_delivery_date_for_items' => null,
        'visible_offers' => null,
        'visible_rank' => null,
        'transport_type' => null,
        'payment_type' => null,
        'valid_until_date' => null,
        'bid_limit' => null,
        'invite_mail_body' => null,
        'invite_mail_subject' => null,
        'files' => null,
        'auto_start' => null,
        'auto_end' => null,
        'vat_rate' => null,
        'bidder_vat_rate' => null,
        'item_files' => null,
        'bid_change_type' => null,
        'change_amounts' => null,
        'time_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'type' => 'type',
        'date' => 'date',
        'time' => 'time',
        'duration' => 'duration',
        'budget' => 'budget',
        'minimum_change' => 'minimumChange',
        'currency' => 'currency',
        'agreement_text' => 'agreementText',
        'delivery_required' => 'deliveryRequired',
        'delivery_date' => 'deliveryDate',
        'reminder' => 'reminder',
        'publish' => 'publish',
        'list_price' => 'listPrice',
        'auction_items' => 'auctionItems',
        'auction_conditions' => 'auctionConditions',
        'bidders' => 'bidders',
        'bidder_groups' => 'bidderGroups',
        'delivery_address' => 'deliveryAddress',
        'note' => 'note',
        'department_id' => 'departmentID',
        'auto_time_extension' => 'autoTimeExtension',
        'bid_change_limit' => 'bidChangeLimit',
        'request_delivery_date_for_items' => 'requestDeliveryDateForItems',
        'visible_offers' => 'visibleOffers',
        'visible_rank' => 'visibleRank',
        'transport_type' => 'transportType',
        'payment_type' => 'paymentType',
        'valid_until_date' => 'validUntilDate',
        'bid_limit' => 'bidLimit',
        'invite_mail_body' => 'inviteMailBody',
        'invite_mail_subject' => 'inviteMailSubject',
        'files' => 'files',
        'auto_start' => 'autoStart',
        'auto_end' => 'autoEnd',
        'vat_rate' => 'vatRate',
        'bidder_vat_rate' => 'bidderVatRate',
        'item_files' => 'itemFiles',
        'bid_change_type' => 'bidChangeType',
        'change_amounts' => 'changeAmounts',
        'time_type' => 'timeType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'type' => 'setType',
        'date' => 'setDate',
        'time' => 'setTime',
        'duration' => 'setDuration',
        'budget' => 'setBudget',
        'minimum_change' => 'setMinimumChange',
        'currency' => 'setCurrency',
        'agreement_text' => 'setAgreementText',
        'delivery_required' => 'setDeliveryRequired',
        'delivery_date' => 'setDeliveryDate',
        'reminder' => 'setReminder',
        'publish' => 'setPublish',
        'list_price' => 'setListPrice',
        'auction_items' => 'setAuctionItems',
        'auction_conditions' => 'setAuctionConditions',
        'bidders' => 'setBidders',
        'bidder_groups' => 'setBidderGroups',
        'delivery_address' => 'setDeliveryAddress',
        'note' => 'setNote',
        'department_id' => 'setDepartmentId',
        'auto_time_extension' => 'setAutoTimeExtension',
        'bid_change_limit' => 'setBidChangeLimit',
        'request_delivery_date_for_items' => 'setRequestDeliveryDateForItems',
        'visible_offers' => 'setVisibleOffers',
        'visible_rank' => 'setVisibleRank',
        'transport_type' => 'setTransportType',
        'payment_type' => 'setPaymentType',
        'valid_until_date' => 'setValidUntilDate',
        'bid_limit' => 'setBidLimit',
        'invite_mail_body' => 'setInviteMailBody',
        'invite_mail_subject' => 'setInviteMailSubject',
        'files' => 'setFiles',
        'auto_start' => 'setAutoStart',
        'auto_end' => 'setAutoEnd',
        'vat_rate' => 'setVatRate',
        'bidder_vat_rate' => 'setBidderVatRate',
        'item_files' => 'setItemFiles',
        'bid_change_type' => 'setBidChangeType',
        'change_amounts' => 'setChangeAmounts',
        'time_type' => 'setTimeType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'type' => 'getType',
        'date' => 'getDate',
        'time' => 'getTime',
        'duration' => 'getDuration',
        'budget' => 'getBudget',
        'minimum_change' => 'getMinimumChange',
        'currency' => 'getCurrency',
        'agreement_text' => 'getAgreementText',
        'delivery_required' => 'getDeliveryRequired',
        'delivery_date' => 'getDeliveryDate',
        'reminder' => 'getReminder',
        'publish' => 'getPublish',
        'list_price' => 'getListPrice',
        'auction_items' => 'getAuctionItems',
        'auction_conditions' => 'getAuctionConditions',
        'bidders' => 'getBidders',
        'bidder_groups' => 'getBidderGroups',
        'delivery_address' => 'getDeliveryAddress',
        'note' => 'getNote',
        'department_id' => 'getDepartmentId',
        'auto_time_extension' => 'getAutoTimeExtension',
        'bid_change_limit' => 'getBidChangeLimit',
        'request_delivery_date_for_items' => 'getRequestDeliveryDateForItems',
        'visible_offers' => 'getVisibleOffers',
        'visible_rank' => 'getVisibleRank',
        'transport_type' => 'getTransportType',
        'payment_type' => 'getPaymentType',
        'valid_until_date' => 'getValidUntilDate',
        'bid_limit' => 'getBidLimit',
        'invite_mail_body' => 'getInviteMailBody',
        'invite_mail_subject' => 'getInviteMailSubject',
        'files' => 'getFiles',
        'auto_start' => 'getAutoStart',
        'auto_end' => 'getAutoEnd',
        'vat_rate' => 'getVatRate',
        'bidder_vat_rate' => 'getBidderVatRate',
        'item_files' => 'getItemFiles',
        'bid_change_type' => 'getBidChangeType',
        'change_amounts' => 'getChangeAmounts',
        'time_type' => 'getTimeType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['budget'] = isset($data['budget']) ? $data['budget'] : null;
        $this->container['minimum_change'] = isset($data['minimum_change']) ? $data['minimum_change'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['agreement_text'] = isset($data['agreement_text']) ? $data['agreement_text'] : '<p>Katılımcısı olacağımız E-ihaleye ait ihale dosyasında bulunan t&uuml;m &ccedil;izim ve d&ouml;k&uuml;manları eksiksiz olarak temin ettiğimizi, incelediğimizi ve bu ihale şartları ile ihaleye katılım davetinizi kabul ederek teklif vereceğimizi, e-ihaleye teklif verenin şirketimizin imza yetkilisi olduğunu, e-ihalenin tarafımızca kazanılması halinde 7 g&uuml;n i&ccedil;inde s&ouml;zleşmeyi imzalayacağımızı, s&ouml;zleşmenin 7 g&uuml;n i&ccedil;inde imzalanmaması halinde ikinci en iyi teklif verene ihalenin verilebileceğini kabul, beyan ve taahh&uuml;t ederiz. Gerekli durumlarda ihale s&uuml;resi işveren tarafından uzatılabilmektedir.</p>';
        $this->container['delivery_required'] = isset($data['delivery_required']) ? $data['delivery_required'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['reminder'] = isset($data['reminder']) ? $data['reminder'] : null;
        $this->container['publish'] = isset($data['publish']) ? $data['publish'] : null;
        $this->container['list_price'] = isset($data['list_price']) ? $data['list_price'] : null;
        $this->container['auction_items'] = isset($data['auction_items']) ? $data['auction_items'] : null;
        $this->container['auction_conditions'] = isset($data['auction_conditions']) ? $data['auction_conditions'] : null;
        $this->container['bidders'] = isset($data['bidders']) ? $data['bidders'] : null;
        $this->container['bidder_groups'] = isset($data['bidder_groups']) ? $data['bidder_groups'] : null;
        $this->container['delivery_address'] = isset($data['delivery_address']) ? $data['delivery_address'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['department_id'] = isset($data['department_id']) ? $data['department_id'] : null;
        $this->container['auto_time_extension'] = isset($data['auto_time_extension']) ? $data['auto_time_extension'] : null;
        $this->container['bid_change_limit'] = isset($data['bid_change_limit']) ? $data['bid_change_limit'] : null;
        $this->container['request_delivery_date_for_items'] = isset($data['request_delivery_date_for_items']) ? $data['request_delivery_date_for_items'] : '1';
        $this->container['visible_offers'] = isset($data['visible_offers']) ? $data['visible_offers'] : '1';
        $this->container['visible_rank'] = isset($data['visible_rank']) ? $data['visible_rank'] : null;
        $this->container['transport_type'] = isset($data['transport_type']) ? $data['transport_type'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['valid_until_date'] = isset($data['valid_until_date']) ? $data['valid_until_date'] : null;
        $this->container['bid_limit'] = isset($data['bid_limit']) ? $data['bid_limit'] : null;
        $this->container['invite_mail_body'] = isset($data['invite_mail_body']) ? $data['invite_mail_body'] : null;
        $this->container['invite_mail_subject'] = isset($data['invite_mail_subject']) ? $data['invite_mail_subject'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['auto_start'] = isset($data['auto_start']) ? $data['auto_start'] : null;
        $this->container['auto_end'] = isset($data['auto_end']) ? $data['auto_end'] : null;
        $this->container['vat_rate'] = isset($data['vat_rate']) ? $data['vat_rate'] : null;
        $this->container['bidder_vat_rate'] = isset($data['bidder_vat_rate']) ? $data['bidder_vat_rate'] : null;
        $this->container['item_files'] = isset($data['item_files']) ? $data['item_files'] : null;
        $this->container['bid_change_type'] = isset($data['bid_change_type']) ? $data['bid_change_type'] : null;
        $this->container['change_amounts'] = isset($data['change_amounts']) ? $data['change_amounts'] : null;
        $this->container['time_type'] = isset($data['time_type']) ? $data['time_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['agreement_text'] === null) {
            $invalidProperties[] = "'agreement_text' can't be null";
        }
        if ($this->container['delivery_required'] === null) {
            $invalidProperties[] = "'delivery_required' can't be null";
        }
        if ($this->container['publish'] === null) {
            $invalidProperties[] = "'publish' can't be null";
        }
        if ($this->container['auction_items'] === null) {
            $invalidProperties[] = "'auction_items' can't be null";
        }
        if ($this->container['department_id'] === null) {
            $invalidProperties[] = "'department_id' can't be null";
        }
        if (!preg_match("/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/", $this->container['department_id'])) {
            $invalidProperties[] = "invalid value for 'department_id', must be conform to the pattern /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/.";
        }

        if ($this->container['invite_mail_subject'] === null) {
            $invalidProperties[] = "'invite_mail_subject' can't be null";
        }
        if ($this->container['bid_change_type'] === null) {
            $invalidProperties[] = "'bid_change_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the auction.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return float
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param float $type Defines the auction type. Examples<br>1:Reverse Classic Auction<br>3:Reverse British Auction<br>4:Reverse Sealed Auction<br>5:Reverse Sealed Enveloped Auction<br>8:Forward Auction
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date Date of the auction of YYYY-MM-DD format.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string $time Time of the day when auction will be ready to start, HH:mm format.
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return float
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param float $duration Duration of the auction. Max: 7 days.
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets budget
     *
     * @return string
     */
    public function getBudget()
    {
        return $this->container['budget'];
    }

    /**
     * Sets budget
     *
     * @param string $budget Budget of the auction. Only used for internal reporting tools.
     *
     * @return $this
     */
    public function setBudget($budget)
    {
        $this->container['budget'] = $budget;

        return $this;
    }

    /**
     * Gets minimum_change
     *
     * @return string
     */
    public function getMinimumChange()
    {
        return $this->container['minimum_change'];
    }

    /**
     * Sets minimum_change
     *
     * @param string $minimum_change Minimum amount of change for the next bid.<br>Depending on the auction type it can be reverse or forward change.
     *
     * @return $this
     */
    public function setMinimumChange($minimum_change)
    {
        $this->container['minimum_change'] = $minimum_change;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency type of the Auction. Bidders will give their bids on this currency.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets agreement_text
     *
     * @return string
     */
    public function getAgreementText()
    {
        return $this->container['agreement_text'];
    }

    /**
     * Sets agreement_text
     *
     * @param string $agreement_text Agreement Text that bidders have to accept before participating in the auction.
     *
     * @return $this
     */
    public function setAgreementText($agreement_text)
    {
        $this->container['agreement_text'] = $agreement_text;

        return $this;
    }

    /**
     * Gets delivery_required
     *
     * @return float
     */
    public function getDeliveryRequired()
    {
        return $this->container['delivery_required'];
    }

    /**
     * Sets delivery_required
     *
     * @param float $delivery_required Define if delivery is required for the auction.<br>1:Required<br>2:Not Required
     *
     * @return $this
     */
    public function setDeliveryRequired($delivery_required)
    {
        $this->container['delivery_required'] = $delivery_required;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string $delivery_date Delivery date in terms of YYYY-MM-DD format.
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets reminder
     *
     * @return \Swagger\Client\Model\AuctionNewReminder
     */
    public function getReminder()
    {
        return $this->container['reminder'];
    }

    /**
     * Sets reminder
     *
     * @param \Swagger\Client\Model\AuctionNewReminder $reminder reminder
     *
     * @return $this
     */
    public function setReminder($reminder)
    {
        $this->container['reminder'] = $reminder;

        return $this;
    }

    /**
     * Gets publish
     *
     * @return float
     */
    public function getPublish()
    {
        return $this->container['publish'];
    }

    /**
     * Sets publish
     *
     * @param float $publish Draft the auction or publish it. Published auctions will be visible by the bidders.<br>1:Publish<br>2:Draft
     *
     * @return $this
     */
    public function setPublish($publish)
    {
        $this->container['publish'] = $publish;

        return $this;
    }

    /**
     * Gets list_price
     *
     * @return float
     */
    public function getListPrice()
    {
        return $this->container['list_price'];
    }

    /**
     * Sets list_price
     *
     * @param float $list_price Indicate if you are attaching list prices to products.<br>1:Not Included<br>2:Included
     *
     * @return $this
     */
    public function setListPrice($list_price)
    {
        $this->container['list_price'] = $list_price;

        return $this;
    }

    /**
     * Gets auction_items
     *
     * @return \Swagger\Client\Model\AuctionNewAuctionItems[]
     */
    public function getAuctionItems()
    {
        return $this->container['auction_items'];
    }

    /**
     * Sets auction_items
     *
     * @param \Swagger\Client\Model\AuctionNewAuctionItems[] $auction_items auction_items
     *
     * @return $this
     */
    public function setAuctionItems($auction_items)
    {
        $this->container['auction_items'] = $auction_items;

        return $this;
    }

    /**
     * Gets auction_conditions
     *
     * @return \Swagger\Client\Model\AuctionNewAuctionConditions[]
     */
    public function getAuctionConditions()
    {
        return $this->container['auction_conditions'];
    }

    /**
     * Sets auction_conditions
     *
     * @param \Swagger\Client\Model\AuctionNewAuctionConditions[] $auction_conditions auction_conditions
     *
     * @return $this
     */
    public function setAuctionConditions($auction_conditions)
    {
        $this->container['auction_conditions'] = $auction_conditions;

        return $this;
    }

    /**
     * Gets bidders
     *
     * @return \Swagger\Client\Model\AuctionNewBidders[]
     */
    public function getBidders()
    {
        return $this->container['bidders'];
    }

    /**
     * Sets bidders
     *
     * @param \Swagger\Client\Model\AuctionNewBidders[] $bidders bidders
     *
     * @return $this
     */
    public function setBidders($bidders)
    {
        $this->container['bidders'] = $bidders;

        return $this;
    }

    /**
     * Gets bidder_groups
     *
     * @return \Swagger\Client\Model\AuctionNewBidderGroups[]
     */
    public function getBidderGroups()
    {
        return $this->container['bidder_groups'];
    }

    /**
     * Sets bidder_groups
     *
     * @param \Swagger\Client\Model\AuctionNewBidderGroups[] $bidder_groups If you attach a bidder group to an auction. All members of this group can bid in this auction.
     *
     * @return $this
     */
    public function setBidderGroups($bidder_groups)
    {
        $this->container['bidder_groups'] = $bidder_groups;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return string
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param string $delivery_address Provide a delivery address to your auction.<br>Required only if deliveryRequired is true!
     *
     * @return $this
     */
    public function setDeliveryAddress($delivery_address)
    {
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Attach a note for your bidders to see.<br>Example: Please place your bids with VAT included prices.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets department_id
     *
     * @return string
     */
    public function getDepartmentId()
    {
        return $this->container['department_id'];
    }

    /**
     * Sets department_id
     *
     * @param string $department_id Department or Project ID.
     *
     * @return $this
     */
    public function setDepartmentId($department_id)
    {

        if ((!preg_match("/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/", $department_id))) {
            throw new \InvalidArgumentException("invalid value for $department_id when calling AuctionNew., must conform to the pattern /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/.");
        }

        $this->container['department_id'] = $department_id;

        return $this;
    }

    /**
     * Gets auto_time_extension
     *
     * @return \Swagger\Client\Model\AuctionNewAutoTimeExtension
     */
    public function getAutoTimeExtension()
    {
        return $this->container['auto_time_extension'];
    }

    /**
     * Sets auto_time_extension
     *
     * @param \Swagger\Client\Model\AuctionNewAutoTimeExtension $auto_time_extension auto_time_extension
     *
     * @return $this
     */
    public function setAutoTimeExtension($auto_time_extension)
    {
        $this->container['auto_time_extension'] = $auto_time_extension;

        return $this;
    }

    /**
     * Gets bid_change_limit
     *
     * @return float
     */
    public function getBidChangeLimit()
    {
        return $this->container['bid_change_limit'];
    }

    /**
     * Sets bid_change_limit
     *
     * @param float $bid_change_limit Limit bidders to increase to decrease their bids depending on the Auction type.<br>1:No Limit<br>2:Apply Limit
     *
     * @return $this
     */
    public function setBidChangeLimit($bid_change_limit)
    {
        $this->container['bid_change_limit'] = $bid_change_limit;

        return $this;
    }

    /**
     * Gets request_delivery_date_for_items
     *
     * @return string
     */
    public function getRequestDeliveryDateForItems()
    {
        return $this->container['request_delivery_date_for_items'];
    }

    /**
     * Sets request_delivery_date_for_items
     *
     * @param string $request_delivery_date_for_items 
     *
     * @return $this
     */
    public function setRequestDeliveryDateForItems($request_delivery_date_for_items)
    {
        $this->container['request_delivery_date_for_items'] = $request_delivery_date_for_items;

        return $this;
    }

    /**
     * Gets visible_offers
     *
     * @return string
     */
    public function getVisibleOffers()
    {
        return $this->container['visible_offers'];
    }

    /**
     * Sets visible_offers
     *
     * @param string $visible_offers Number of lowest/highest number of offers to bidders.<br>Only available in Classic Auction types.
     *
     * @return $this
     */
    public function setVisibleOffers($visible_offers)
    {
        $this->container['visible_offers'] = $visible_offers;

        return $this;
    }

    /**
     * Gets visible_rank
     *
     * @return float
     */
    public function getVisibleRank()
    {
        return $this->container['visible_rank'];
    }

    /**
     * Sets visible_rank
     *
     * @param float $visible_rank Allow bidders to see their rank in total amount.<br>Only available in British Auction types.
     *
     * @return $this
     */
    public function setVisibleRank($visible_rank)
    {
        $this->container['visible_rank'] = $visible_rank;

        return $this;
    }

    /**
     * Gets transport_type
     *
     * @return string
     */
    public function getTransportType()
    {
        return $this->container['transport_type'];
    }

    /**
     * Sets transport_type
     *
     * @param string $transport_type Transport type of the items used in Auction.
     *
     * @return $this
     */
    public function setTransportType($transport_type)
    {
        $this->container['transport_type'] = $transport_type;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string $payment_type Payment type of the items used in Auction.
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets valid_until_date
     *
     * @return string
     */
    public function getValidUntilDate()
    {
        return $this->container['valid_until_date'];
    }

    /**
     * Sets valid_until_date
     *
     * @param string $valid_until_date Valid until date of the items used in Auction.
     *
     * @return $this
     */
    public function setValidUntilDate($valid_until_date)
    {
        $this->container['valid_until_date'] = $valid_until_date;

        return $this;
    }

    /**
     * Gets bid_limit
     *
     * @return float
     */
    public function getBidLimit()
    {
        return $this->container['bid_limit'];
    }

    /**
     * Sets bid_limit
     *
     * @param float $bid_limit Maximum/Minimum bid limit. Depending on the auction type it can be reverse or forward change.
     *
     * @return $this
     */
    public function setBidLimit($bid_limit)
    {
        $this->container['bid_limit'] = $bid_limit;

        return $this;
    }

    /**
     * Gets invite_mail_body
     *
     * @return string
     */
    public function getInviteMailBody()
    {
        return $this->container['invite_mail_body'];
    }

    /**
     * Sets invite_mail_body
     *
     * @param string $invite_mail_body The content of the outgoing mail when the auction is published.
     *
     * @return $this
     */
    public function setInviteMailBody($invite_mail_body)
    {
        $this->container['invite_mail_body'] = $invite_mail_body;

        return $this;
    }

    /**
     * Gets invite_mail_subject
     *
     * @return string
     */
    public function getInviteMailSubject()
    {
        return $this->container['invite_mail_subject'];
    }

    /**
     * Sets invite_mail_subject
     *
     * @param string $invite_mail_subject The subject of the outgoing mail when the auction is published.
     *
     * @return $this
     */
    public function setInviteMailSubject($invite_mail_subject)
    {
        $this->container['invite_mail_subject'] = $invite_mail_subject;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \Swagger\Client\Model\ProcurementRequestNewFiles[]
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \Swagger\Client\Model\ProcurementRequestNewFiles[] $files Attach files in the auction.
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets auto_start
     *
     * @return float
     */
    public function getAutoStart()
    {
        return $this->container['auto_start'];
    }

    /**
     * Sets auto_start
     *
     * @param float $auto_start Activate if you want the auction to start automatically.
     *
     * @return $this
     */
    public function setAutoStart($auto_start)
    {
        $this->container['auto_start'] = $auto_start;

        return $this;
    }

    /**
     * Gets auto_end
     *
     * @return float
     */
    public function getAutoEnd()
    {
        return $this->container['auto_end'];
    }

    /**
     * Sets auto_end
     *
     * @param float $auto_end Activate if you want the auction to end automatically.
     *
     * @return $this
     */
    public function setAutoEnd($auto_end)
    {
        $this->container['auto_end'] = $auto_end;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return float
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param float $vat_rate Activate if you want item-based vat rate.
     *
     * @return $this
     */
    public function setVatRate($vat_rate)
    {
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets bidder_vat_rate
     *
     * @return float
     */
    public function getBidderVatRate()
    {
        return $this->container['bidder_vat_rate'];
    }

    /**
     * Sets bidder_vat_rate
     *
     * @param float $bidder_vat_rate Activate if you want bidders to provide item-based vat rates.
     *
     * @return $this
     */
    public function setBidderVatRate($bidder_vat_rate)
    {
        $this->container['bidder_vat_rate'] = $bidder_vat_rate;

        return $this;
    }

    /**
     * Gets item_files
     *
     * @return float
     */
    public function getItemFiles()
    {
        return $this->container['item_files'];
    }

    /**
     * Sets item_files
     *
     * @param float $item_files Indicate if you are attaching files to items.
     *
     * @return $this
     */
    public function setItemFiles($item_files)
    {
        $this->container['item_files'] = $item_files;

        return $this;
    }

    /**
     * Gets bid_change_type
     *
     * @return float
     */
    public function getBidChangeType()
    {
        return $this->container['bid_change_type'];
    }

    /**
     * Sets bid_change_type
     *
     * @param float $bid_change_type 1: Write bid amount.<br>2: Change amount button.
     *
     * @return $this
     */
    public function setBidChangeType($bid_change_type)
    {
        $this->container['bid_change_type'] = $bid_change_type;

        return $this;
    }

    /**
     * Gets change_amounts
     *
     * @return \Swagger\Client\Model\AuctionNewChangeAmounts[]
     */
    public function getChangeAmounts()
    {
        return $this->container['change_amounts'];
    }

    /**
     * Sets change_amounts
     *
     * @param \Swagger\Client\Model\AuctionNewChangeAmounts[] $change_amounts change_amounts
     *
     * @return $this
     */
    public function setChangeAmounts($change_amounts)
    {
        $this->container['change_amounts'] = $change_amounts;

        return $this;
    }

    /**
     * Gets time_type
     *
     * @return float
     */
    public function getTimeType()
    {
        return $this->container['time_type'];
    }

    /**
     * Sets time_type
     *
     * @param float $time_type Auction time type. <br>1: Auction times are processed in minutes.<br>2: Auction times are processed in seconds.
     *
     * @return $this
     */
    public function setTimeType($time_type)
    {
        $this->container['time_type'] = $time_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


