<?php
/**
 * AuctionInformationResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jetract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JETRACT
 *
 * <b>Main API (Application Programming Interface) of Jetract E-Auction and E-Procurement solutions.</b><br><i>Property of INARTS YAZILIM BILISIM INSAAT SAN. VE TIC. A.Åž.</i>
 *
 * OpenAPI spec version: 0.9.4
 * Contact: support-api@jetract.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.2
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jetract\Model;

use \ArrayAccess;
use \Jetract\ObjectSerializer;

/**
 * AuctionInformationResponse Class Doc Comment
 *
 * @category Class
 * @package  Jetract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuctionInformationResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuctionInformationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'iD' => 'string',
        'code' => 'string',
        'name' => 'string',
        'type' => 'float',
        'bidChangeLimit' => 'float',
        'bidLimit' => 'float',
        'budget' => 'float',
        'minimumChange' => 'float',
        'currency' => 'string',
        'visibleRank' => 'bool',
        'listPrice' => 'float',
        'agreementText' => 'string',
        'note' => 'string',
        'deliveryDate' => '\DateTime',
        'autoTimeExtension' => '\Jetract\Model\AuctionInformationResponseAutoTimeExtension',
        'date' => '\DateTime',
        'duration' => 'float',
        'defaultDuration' => 'float',
        'endDate' => '\DateTime',
        'reminder' => '\Jetract\Model\AuctionInformationResponseReminder',
        'publish' => 'float',
        'status' => 'float',
        'startDate' => '\DateTime',
        'transportType' => 'string',
        'inviteMailTitle' => 'string',
        'inviteMailBody' => 'string',
        'validUntilDate' => '\DateTime',
        'paymentTypeID' => 'string',
        'createdDate' => '\DateTime',
        'approvalProcess' => '\Jetract\Model\AuctionInformationResponseApprovalProcess',
        'department' => '\Jetract\Model\AuctionInformationResponseDepartment',
        'orderID' => 'string',
        'creator' => '\Jetract\Model\AuctionInformationResponseCreator',
        'timeControl' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'iD' => null,
        'code' => null,
        'name' => null,
        'type' => null,
        'bidChangeLimit' => null,
        'bidLimit' => null,
        'budget' => null,
        'minimumChange' => null,
        'currency' => null,
        'visibleRank' => null,
        'listPrice' => null,
        'agreementText' => null,
        'note' => null,
        'deliveryDate' => 'date-time',
        'autoTimeExtension' => null,
        'date' => 'date-time',
        'duration' => null,
        'defaultDuration' => null,
        'endDate' => 'date-time',
        'reminder' => null,
        'publish' => null,
        'status' => null,
        'startDate' => 'date-time',
        'transportType' => null,
        'inviteMailTitle' => null,
        'inviteMailBody' => null,
        'validUntilDate' => 'date-time',
        'paymentTypeID' => null,
        'createdDate' => 'date-time',
        'approvalProcess' => null,
        'department' => null,
        'orderID' => null,
        'creator' => null,
        'timeControl' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'iD' => 'ID',
        'code' => 'code',
        'name' => 'name',
        'type' => 'type',
        'bidChangeLimit' => 'bidChangeLimit',
        'bidLimit' => 'bidLimit',
        'budget' => 'budget',
        'minimumChange' => 'minimumChange',
        'currency' => 'currency',
        'visibleRank' => 'visibleRank',
        'listPrice' => 'listPrice',
        'agreementText' => 'agreementText',
        'note' => 'note',
        'deliveryDate' => 'deliveryDate',
        'autoTimeExtension' => 'autoTimeExtension',
        'date' => 'date',
        'duration' => 'duration',
        'defaultDuration' => 'defaultDuration',
        'endDate' => 'endDate',
        'reminder' => 'reminder',
        'publish' => 'publish',
        'status' => 'status',
        'startDate' => 'startDate',
        'transportType' => 'transportType',
        'inviteMailTitle' => 'inviteMailTitle',
        'inviteMailBody' => 'inviteMailBody',
        'validUntilDate' => 'validUntilDate',
        'paymentTypeID' => 'paymentTypeID',
        'createdDate' => 'createdDate',
        'approvalProcess' => 'approvalProcess',
        'department' => 'department',
        'orderID' => 'orderID',
        'creator' => 'creator',
        'timeControl' => 'timeControl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'iD' => 'setID',
        'code' => 'setCode',
        'name' => 'setName',
        'type' => 'setType',
        'bidChangeLimit' => 'setBidChangeLimit',
        'bidLimit' => 'setBidLimit',
        'budget' => 'setBudget',
        'minimumChange' => 'setMinimumChange',
        'currency' => 'setCurrency',
        'visibleRank' => 'setVisibleRank',
        'listPrice' => 'setListPrice',
        'agreementText' => 'setAgreementText',
        'note' => 'setNote',
        'deliveryDate' => 'setDeliveryDate',
        'autoTimeExtension' => 'setAutoTimeExtension',
        'date' => 'setDate',
        'duration' => 'setDuration',
        'defaultDuration' => 'setDefaultDuration',
        'endDate' => 'setEndDate',
        'reminder' => 'setReminder',
        'publish' => 'setPublish',
        'status' => 'setStatus',
        'startDate' => 'setStartDate',
        'transportType' => 'setTransportType',
        'inviteMailTitle' => 'setInviteMailTitle',
        'inviteMailBody' => 'setInviteMailBody',
        'validUntilDate' => 'setValidUntilDate',
        'paymentTypeID' => 'setPaymentTypeID',
        'createdDate' => 'setCreatedDate',
        'approvalProcess' => 'setApprovalProcess',
        'department' => 'setDepartment',
        'orderID' => 'setOrderID',
        'creator' => 'setCreator',
        'timeControl' => 'setTimeControl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'iD' => 'getID',
        'code' => 'getCode',
        'name' => 'getName',
        'type' => 'getType',
        'bidChangeLimit' => 'getBidChangeLimit',
        'bidLimit' => 'getBidLimit',
        'budget' => 'getBudget',
        'minimumChange' => 'getMinimumChange',
        'currency' => 'getCurrency',
        'visibleRank' => 'getVisibleRank',
        'listPrice' => 'getListPrice',
        'agreementText' => 'getAgreementText',
        'note' => 'getNote',
        'deliveryDate' => 'getDeliveryDate',
        'autoTimeExtension' => 'getAutoTimeExtension',
        'date' => 'getDate',
        'duration' => 'getDuration',
        'defaultDuration' => 'getDefaultDuration',
        'endDate' => 'getEndDate',
        'reminder' => 'getReminder',
        'publish' => 'getPublish',
        'status' => 'getStatus',
        'startDate' => 'getStartDate',
        'transportType' => 'getTransportType',
        'inviteMailTitle' => 'getInviteMailTitle',
        'inviteMailBody' => 'getInviteMailBody',
        'validUntilDate' => 'getValidUntilDate',
        'paymentTypeID' => 'getPaymentTypeID',
        'createdDate' => 'getCreatedDate',
        'approvalProcess' => 'getApprovalProcess',
        'department' => 'getDepartment',
        'orderID' => 'getOrderID',
        'creator' => 'getCreator',
        'timeControl' => 'getTimeControl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['iD'] = isset($data['iD']) ? $data['iD'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['bidChangeLimit'] = isset($data['bidChangeLimit']) ? $data['bidChangeLimit'] : null;
        $this->container['bidLimit'] = isset($data['bidLimit']) ? $data['bidLimit'] : null;
        $this->container['budget'] = isset($data['budget']) ? $data['budget'] : null;
        $this->container['minimumChange'] = isset($data['minimumChange']) ? $data['minimumChange'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['visibleRank'] = isset($data['visibleRank']) ? $data['visibleRank'] : null;
        $this->container['listPrice'] = isset($data['listPrice']) ? $data['listPrice'] : null;
        $this->container['agreementText'] = isset($data['agreementText']) ? $data['agreementText'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['deliveryDate'] = isset($data['deliveryDate']) ? $data['deliveryDate'] : null;
        $this->container['autoTimeExtension'] = isset($data['autoTimeExtension']) ? $data['autoTimeExtension'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['defaultDuration'] = isset($data['defaultDuration']) ? $data['defaultDuration'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['reminder'] = isset($data['reminder']) ? $data['reminder'] : null;
        $this->container['publish'] = isset($data['publish']) ? $data['publish'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['transportType'] = isset($data['transportType']) ? $data['transportType'] : null;
        $this->container['inviteMailTitle'] = isset($data['inviteMailTitle']) ? $data['inviteMailTitle'] : null;
        $this->container['inviteMailBody'] = isset($data['inviteMailBody']) ? $data['inviteMailBody'] : null;
        $this->container['validUntilDate'] = isset($data['validUntilDate']) ? $data['validUntilDate'] : null;
        $this->container['paymentTypeID'] = isset($data['paymentTypeID']) ? $data['paymentTypeID'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['approvalProcess'] = isset($data['approvalProcess']) ? $data['approvalProcess'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['orderID'] = isset($data['orderID']) ? $data['orderID'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['timeControl'] = isset($data['timeControl']) ? $data['timeControl'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['duration']) && ($this->container['duration'] > 10080)) {
            $invalidProperties[] = "invalid value for 'duration', must be smaller than or equal to 10080.";
        }

        if (!is_null($this->container['duration']) && ($this->container['duration'] < 0)) {
            $invalidProperties[] = "invalid value for 'duration', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['defaultDuration']) && ($this->container['defaultDuration'] > 10080)) {
            $invalidProperties[] = "invalid value for 'defaultDuration', must be smaller than or equal to 10080.";
        }

        if (!is_null($this->container['defaultDuration']) && ($this->container['defaultDuration'] < 0)) {
            $invalidProperties[] = "invalid value for 'defaultDuration', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets iD
     *
     * @return string
     */
    public function getID()
    {
        return $this->container['iD'];
    }

    /**
     * Sets iD
     *
     * @param string $iD ID of the auction.
     *
     * @return $this
     */
    public function setID($iD)
    {
        $this->container['iD'] = $iD;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Code of the auction. Automatically generated.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the auction.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return float
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param float $type Defines the auction type. Examples<br>1:Reverse Classic Auction<br>3:Reverse British Auction<br>4:Reverse Sealed Auction<br>5:Reverse Sealed Enveloped Auction
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets bidChangeLimit
     *
     * @return float
     */
    public function getBidChangeLimit()
    {
        return $this->container['bidChangeLimit'];
    }

    /**
     * Sets bidChangeLimit
     *
     * @param float $bidChangeLimit Limit bidders to increase to decrease their bids depending on the Auction type.<br>1:No Limit<br>2:Apply Limit
     *
     * @return $this
     */
    public function setBidChangeLimit($bidChangeLimit)
    {
        $this->container['bidChangeLimit'] = $bidChangeLimit;

        return $this;
    }

    /**
     * Gets bidLimit
     *
     * @return float
     */
    public function getBidLimit()
    {
        return $this->container['bidLimit'];
    }

    /**
     * Sets bidLimit
     *
     * @param float $bidLimit Maximum/Minimum bid limit. Depending on the auction type it can be reverse or forward change.<br>When not specified, returns zero value.
     *
     * @return $this
     */
    public function setBidLimit($bidLimit)
    {
        $this->container['bidLimit'] = $bidLimit;

        return $this;
    }

    /**
     * Gets budget
     *
     * @return float
     */
    public function getBudget()
    {
        return $this->container['budget'];
    }

    /**
     * Sets budget
     *
     * @param float $budget Budget of the auction. Only used for internal reporting tools.<br>When not specified, returns zero value.
     *
     * @return $this
     */
    public function setBudget($budget)
    {
        $this->container['budget'] = $budget;

        return $this;
    }

    /**
     * Gets minimumChange
     *
     * @return float
     */
    public function getMinimumChange()
    {
        return $this->container['minimumChange'];
    }

    /**
     * Sets minimumChange
     *
     * @param float $minimumChange Minimum amount of change for the next bid.<br>Depending on the auction type it can be reverse or forward change.<br>When not specified, returns zero value.
     *
     * @return $this
     */
    public function setMinimumChange($minimumChange)
    {
        $this->container['minimumChange'] = $minimumChange;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency type of the Auction. Bidders will give their bids on this currency.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets visibleRank
     *
     * @return bool
     */
    public function getVisibleRank()
    {
        return $this->container['visibleRank'];
    }

    /**
     * Sets visibleRank
     *
     * @param bool $visibleRank Allow bidders to see their rank in total amount.<br>Only available in British Auction types.
     *
     * @return $this
     */
    public function setVisibleRank($visibleRank)
    {
        $this->container['visibleRank'] = $visibleRank;

        return $this;
    }

    /**
     * Gets listPrice
     *
     * @return float
     */
    public function getListPrice()
    {
        return $this->container['listPrice'];
    }

    /**
     * Sets listPrice
     *
     * @param float $listPrice 
     *
     * @return $this
     */
    public function setListPrice($listPrice)
    {
        $this->container['listPrice'] = $listPrice;

        return $this;
    }

    /**
     * Gets agreementText
     *
     * @return string
     */
    public function getAgreementText()
    {
        return $this->container['agreementText'];
    }

    /**
     * Sets agreementText
     *
     * @param string $agreementText Agreement Text that bidders have to accept before participating in the auction.
     *
     * @return $this
     */
    public function setAgreementText($agreementText)
    {
        $this->container['agreementText'] = $agreementText;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Attached a note for your suppliers to sees.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets deliveryDate
     *
     * @return \DateTime
     */
    public function getDeliveryDate()
    {
        return $this->container['deliveryDate'];
    }

    /**
     * Sets deliveryDate
     *
     * @param \DateTime $deliveryDate Delivery date in terms of YYYY-MM-DD HH:MM:SS format.
     *
     * @return $this
     */
    public function setDeliveryDate($deliveryDate)
    {
        $this->container['deliveryDate'] = $deliveryDate;

        return $this;
    }

    /**
     * Gets autoTimeExtension
     *
     * @return \Jetract\Model\AuctionInformationResponseAutoTimeExtension
     */
    public function getAutoTimeExtension()
    {
        return $this->container['autoTimeExtension'];
    }

    /**
     * Sets autoTimeExtension
     *
     * @param \Jetract\Model\AuctionInformationResponseAutoTimeExtension $autoTimeExtension autoTimeExtension
     *
     * @return $this
     */
    public function setAutoTimeExtension($autoTimeExtension)
    {
        $this->container['autoTimeExtension'] = $autoTimeExtension;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Date of the auction of YYYY-MM-DD HH:MM:SS format.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return float
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param float $duration Duration of the auction.
     *
     * @return $this
     */
    public function setDuration($duration)
    {

        if (!is_null($duration) && ($duration > 10080)) {
            throw new \InvalidArgumentException('invalid value for $duration when calling AuctionInformationResponse., must be smaller than or equal to 10080.');
        }
        if (!is_null($duration) && ($duration < 0)) {
            throw new \InvalidArgumentException('invalid value for $duration when calling AuctionInformationResponse., must be bigger than or equal to 0.');
        }

        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets defaultDuration
     *
     * @return float
     */
    public function getDefaultDuration()
    {
        return $this->container['defaultDuration'];
    }

    /**
     * Sets defaultDuration
     *
     * @param float $defaultDuration Duration of the auction is not included time extension.
     *
     * @return $this
     */
    public function setDefaultDuration($defaultDuration)
    {

        if (!is_null($defaultDuration) && ($defaultDuration > 10080)) {
            throw new \InvalidArgumentException('invalid value for $defaultDuration when calling AuctionInformationResponse., must be smaller than or equal to 10080.');
        }
        if (!is_null($defaultDuration) && ($defaultDuration < 0)) {
            throw new \InvalidArgumentException('invalid value for $defaultDuration when calling AuctionInformationResponse., must be bigger than or equal to 0.');
        }

        $this->container['defaultDuration'] = $defaultDuration;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime $endDate End Date of the auction of YYYY-MM-DD HH:MM:SS format.
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets reminder
     *
     * @return \Jetract\Model\AuctionInformationResponseReminder
     */
    public function getReminder()
    {
        return $this->container['reminder'];
    }

    /**
     * Sets reminder
     *
     * @param \Jetract\Model\AuctionInformationResponseReminder $reminder reminder
     *
     * @return $this
     */
    public function setReminder($reminder)
    {
        $this->container['reminder'] = $reminder;

        return $this;
    }

    /**
     * Gets publish
     *
     * @return float
     */
    public function getPublish()
    {
        return $this->container['publish'];
    }

    /**
     * Sets publish
     *
     * @param float $publish Draft the auction or publish it. Published auctions will be visible by the bidders.<br>1:Publish<br>2:Draft
     *
     * @return $this
     */
    public function setPublish($publish)
    {
        $this->container['publish'] = $publish;

        return $this;
    }

    /**
     * Gets status
     *
     * @return float
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param float $status status of the auction.<br>1:Waiting (Auction opened, but not yet started.).<br>2:Active (Auction started and currently active.).<br>3:Approval process (Auction is ended and not approval process start yet.).<br>4:Completed (Procurement process is completed for auction.).
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime $startDate The auction start date on. YYYY-MM-DD HH:MM:SS format.
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets transportType
     *
     * @return string
     */
    public function getTransportType()
    {
        return $this->container['transportType'];
    }

    /**
     * Sets transportType
     *
     * @param string $transportType If the value is empty, bidders will choose the own transport type.
     *
     * @return $this
     */
    public function setTransportType($transportType)
    {
        $this->container['transportType'] = $transportType;

        return $this;
    }

    /**
     * Gets inviteMailTitle
     *
     * @return string
     */
    public function getInviteMailTitle()
    {
        return $this->container['inviteMailTitle'];
    }

    /**
     * Sets inviteMailTitle
     *
     * @param string $inviteMailTitle The subject of the outgoing mail when the auction is published.
     *
     * @return $this
     */
    public function setInviteMailTitle($inviteMailTitle)
    {
        $this->container['inviteMailTitle'] = $inviteMailTitle;

        return $this;
    }

    /**
     * Gets inviteMailBody
     *
     * @return string
     */
    public function getInviteMailBody()
    {
        return $this->container['inviteMailBody'];
    }

    /**
     * Sets inviteMailBody
     *
     * @param string $inviteMailBody The content of the outgoing mail when the auction is published.
     *
     * @return $this
     */
    public function setInviteMailBody($inviteMailBody)
    {
        $this->container['inviteMailBody'] = $inviteMailBody;

        return $this;
    }

    /**
     * Gets validUntilDate
     *
     * @return \DateTime
     */
    public function getValidUntilDate()
    {
        return $this->container['validUntilDate'];
    }

    /**
     * Sets validUntilDate
     *
     * @param \DateTime $validUntilDate If the value is empty, bidders will choose the validity date. YYYY-MM-DD HH:MM:SS format when is not empty.
     *
     * @return $this
     */
    public function setValidUntilDate($validUntilDate)
    {
        $this->container['validUntilDate'] = $validUntilDate;

        return $this;
    }

    /**
     * Gets paymentTypeID
     *
     * @return string
     */
    public function getPaymentTypeID()
    {
        return $this->container['paymentTypeID'];
    }

    /**
     * Sets paymentTypeID
     *
     * @param string $paymentTypeID If the value is empty, bidders will choose the own payment type.
     *
     * @return $this
     */
    public function setPaymentTypeID($paymentTypeID)
    {
        $this->container['paymentTypeID'] = $paymentTypeID;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime $createdDate Auction create date. YYYY-MM-DD HH:MM:SS format.
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets approvalProcess
     *
     * @return \Jetract\Model\AuctionInformationResponseApprovalProcess
     */
    public function getApprovalProcess()
    {
        return $this->container['approvalProcess'];
    }

    /**
     * Sets approvalProcess
     *
     * @param \Jetract\Model\AuctionInformationResponseApprovalProcess $approvalProcess approvalProcess
     *
     * @return $this
     */
    public function setApprovalProcess($approvalProcess)
    {
        $this->container['approvalProcess'] = $approvalProcess;

        return $this;
    }

    /**
     * Gets department
     *
     * @return \Jetract\Model\AuctionInformationResponseDepartment
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param \Jetract\Model\AuctionInformationResponseDepartment $department department
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets orderID
     *
     * @return string
     */
    public function getOrderID()
    {
        return $this->container['orderID'];
    }

    /**
     * Sets orderID
     *
     * @param string $orderID ID of the order if the auction converted to order.
     *
     * @return $this
     */
    public function setOrderID($orderID)
    {
        $this->container['orderID'] = $orderID;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \Jetract\Model\AuctionInformationResponseCreator
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \Jetract\Model\AuctionInformationResponseCreator $creator creator
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets timeControl
     *
     * @return bool
     */
    public function getTimeControl()
    {
        return $this->container['timeControl'];
    }

    /**
     * Sets timeControl
     *
     * @param bool $timeControl 
     *
     * @return $this
     */
    public function setTimeControl($timeControl)
    {
        $this->container['timeControl'] = $timeControl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


