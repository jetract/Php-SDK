<?php
/**
 * OrderInformationResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JETRACT
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OrderInformationResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderInformationResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderInformationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'code' => 'string',
        'name' => 'string',
        'convert_type' => 'string',
        'currency_type' => 'string',
        'decimal_place' => 'float',
        'department' => 'object',
        'description' => 'string',
        'delivery_date' => 'string',
        'officer' => 'object',
        'creator' => 'object',
        'created_date' => 'string',
        'bidder' => 'object',
        'is_bidder_confirm' => 'bool',
        'active' => 'bool',
        'type' => 'float',
        'transport_type' => 'string',
        'payment_type' => 'object',
        'delivery_address' => 'object',
        'order_settings' => 'object',
        'order_items' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'code' => null,
        'name' => null,
        'convert_type' => null,
        'currency_type' => null,
        'decimal_place' => null,
        'department' => null,
        'description' => null,
        'delivery_date' => null,
        'officer' => null,
        'creator' => null,
        'created_date' => null,
        'bidder' => null,
        'is_bidder_confirm' => null,
        'active' => null,
        'type' => null,
        'transport_type' => null,
        'payment_type' => null,
        'delivery_address' => null,
        'order_settings' => null,
        'order_items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'code' => 'code',
        'name' => 'name',
        'convert_type' => 'convertType',
        'currency_type' => 'currencyType',
        'decimal_place' => 'decimalPlace',
        'department' => 'department',
        'description' => 'description',
        'delivery_date' => 'deliveryDate',
        'officer' => 'officer',
        'creator' => 'creator',
        'created_date' => 'createdDate',
        'bidder' => 'bidder',
        'is_bidder_confirm' => 'isBidderConfirm',
        'active' => 'active',
        'type' => 'type',
        'transport_type' => 'transportType',
        'payment_type' => 'paymentType',
        'delivery_address' => 'deliveryAddress',
        'order_settings' => 'orderSettings',
        'order_items' => 'orderItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'name' => 'setName',
        'convert_type' => 'setConvertType',
        'currency_type' => 'setCurrencyType',
        'decimal_place' => 'setDecimalPlace',
        'department' => 'setDepartment',
        'description' => 'setDescription',
        'delivery_date' => 'setDeliveryDate',
        'officer' => 'setOfficer',
        'creator' => 'setCreator',
        'created_date' => 'setCreatedDate',
        'bidder' => 'setBidder',
        'is_bidder_confirm' => 'setIsBidderConfirm',
        'active' => 'setActive',
        'type' => 'setType',
        'transport_type' => 'setTransportType',
        'payment_type' => 'setPaymentType',
        'delivery_address' => 'setDeliveryAddress',
        'order_settings' => 'setOrderSettings',
        'order_items' => 'setOrderItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'name' => 'getName',
        'convert_type' => 'getConvertType',
        'currency_type' => 'getCurrencyType',
        'decimal_place' => 'getDecimalPlace',
        'department' => 'getDepartment',
        'description' => 'getDescription',
        'delivery_date' => 'getDeliveryDate',
        'officer' => 'getOfficer',
        'creator' => 'getCreator',
        'created_date' => 'getCreatedDate',
        'bidder' => 'getBidder',
        'is_bidder_confirm' => 'getIsBidderConfirm',
        'active' => 'getActive',
        'type' => 'getType',
        'transport_type' => 'getTransportType',
        'payment_type' => 'getPaymentType',
        'delivery_address' => 'getDeliveryAddress',
        'order_settings' => 'getOrderSettings',
        'order_items' => 'getOrderItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['convert_type'] = isset($data['convert_type']) ? $data['convert_type'] : null;
        $this->container['currency_type'] = isset($data['currency_type']) ? $data['currency_type'] : null;
        $this->container['decimal_place'] = isset($data['decimal_place']) ? $data['decimal_place'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['officer'] = isset($data['officer']) ? $data['officer'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['bidder'] = isset($data['bidder']) ? $data['bidder'] : null;
        $this->container['is_bidder_confirm'] = isset($data['is_bidder_confirm']) ? $data['is_bidder_confirm'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['transport_type'] = isset($data['transport_type']) ? $data['transport_type'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['delivery_address'] = isset($data['delivery_address']) ? $data['delivery_address'] : null;
        $this->container['order_settings'] = isset($data['order_settings']) ? $data['order_settings'] : null;
        $this->container['order_items'] = isset($data['order_items']) ? $data['order_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the order.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Code of the order. Automatically generated.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the order.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets convert_type
     *
     * @return string
     */
    public function getConvertType()
    {
        return $this->container['convert_type'];
    }

    /**
     * Sets convert_type
     *
     * @param string $convert_type Convert type of the order. Examples:<br>1:Request to order,2: Auction/RFQ to order
     *
     * @return $this
     */
    public function setConvertType($convert_type)
    {
        $this->container['convert_type'] = $convert_type;

        return $this;
    }

    /**
     * Gets currency_type
     *
     * @return string
     */
    public function getCurrencyType()
    {
        return $this->container['currency_type'];
    }

    /**
     * Sets currency_type
     *
     * @param string $currency_type Currency type of the order. Examples:<br>TL,USD,EUR
     *
     * @return $this
     */
    public function setCurrencyType($currency_type)
    {
        $this->container['currency_type'] = $currency_type;

        return $this;
    }

    /**
     * Gets decimal_place
     *
     * @return float
     */
    public function getDecimalPlace()
    {
        return $this->container['decimal_place'];
    }

    /**
     * Sets decimal_place
     *
     * @param float $decimal_place Decimal place type of the order prices.
     *
     * @return $this
     */
    public function setDecimalPlace($decimal_place)
    {
        $this->container['decimal_place'] = $decimal_place;

        return $this;
    }

    /**
     * Gets department
     *
     * @return object
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param object $department The order department/project.
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Attached a description for your suppliers to sees.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string $delivery_date Delivery date in terms of YYYY-MM-DD format.
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets officer
     *
     * @return object
     */
    public function getOfficer()
    {
        return $this->container['officer'];
    }

    /**
     * Sets officer
     *
     * @param object $officer Information of the user who officer the order.
     *
     * @return $this
     */
    public function setOfficer($officer)
    {
        $this->container['officer'] = $officer;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return object
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param object $creator Information of the user who created the order.
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return string
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param string $created_date Order create date. YYYY-MM-DD HH:MM:SS format.
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets bidder
     *
     * @return object
     */
    public function getBidder()
    {
        return $this->container['bidder'];
    }

    /**
     * Sets bidder
     *
     * @param object $bidder //
     *
     * @return $this
     */
    public function setBidder($bidder)
    {
        $this->container['bidder'] = $bidder;

        return $this;
    }

    /**
     * Gets is_bidder_confirm
     *
     * @return bool
     */
    public function getIsBidderConfirm()
    {
        return $this->container['is_bidder_confirm'];
    }

    /**
     * Sets is_bidder_confirm
     *
     * @param bool $is_bidder_confirm 
     *
     * @return $this
     */
    public function setIsBidderConfirm($is_bidder_confirm)
    {
        $this->container['is_bidder_confirm'] = $is_bidder_confirm;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active 
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets type
     *
     * @return float
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param float $type Examples:<br>1:Materials,2:Workmanship,3:Materials and workmanship
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets transport_type
     *
     * @return string
     */
    public function getTransportType()
    {
        return $this->container['transport_type'];
    }

    /**
     * Sets transport_type
     *
     * @param string $transport_type Transport type of the order
     *
     * @return $this
     */
    public function setTransportType($transport_type)
    {
        $this->container['transport_type'] = $transport_type;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return object
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param object $payment_type Information of the order payment type.
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return object
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param object $delivery_address Information of the order delivery address.
     *
     * @return $this
     */
    public function setDeliveryAddress($delivery_address)
    {
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets order_settings
     *
     * @return object
     */
    public function getOrderSettings()
    {
        return $this->container['order_settings'];
    }

    /**
     * Sets order_settings
     *
     * @param object $order_settings order_settings
     *
     * @return $this
     */
    public function setOrderSettings($order_settings)
    {
        $this->container['order_settings'] = $order_settings;

        return $this;
    }

    /**
     * Gets order_items
     *
     * @return object
     */
    public function getOrderItems()
    {
        return $this->container['order_items'];
    }

    /**
     * Sets order_items
     *
     * @param object $order_items Information of the order items.
     *
     * @return $this
     */
    public function setOrderItems($order_items)
    {
        $this->container['order_items'] = $order_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


